
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer VL_create_buffer
#define yy_delete_buffer VL_delete_buffer
#define yy_scan_buffer VL_scan_buffer
#define yy_scan_string VL_scan_string
#define yy_scan_bytes VL_scan_bytes
#define yy_init_buffer VL_init_buffer
#define yy_flush_buffer VL_flush_buffer
#define yy_load_buffer_state VL_load_buffer_state
#define yy_switch_to_buffer VL_switch_to_buffer
#define yypush_buffer_state VLpush_buffer_state
#define yypop_buffer_state VLpop_buffer_state
#define yyensure_buffer_stack VLensure_buffer_stack
#define yy_flex_debug VL_flex_debug
#define yyin VLin
#define yyleng VLleng
#define yylex VLlex
#define yylineno VLlineno
#define yyout VLout
#define yyrestart VLrestart
#define yytext VLtext
#define yywrap VLwrap
#define yyalloc VLalloc
#define yyrealloc VLrealloc
#define yyfree VLfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define VL_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer VL_create_buffer
#endif

#ifdef yy_delete_buffer
#define VL_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer VL_delete_buffer
#endif

#ifdef yy_scan_buffer
#define VL_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer VL_scan_buffer
#endif

#ifdef yy_scan_string
#define VL_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string VL_scan_string
#endif

#ifdef yy_scan_bytes
#define VL_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes VL_scan_bytes
#endif

#ifdef yy_init_buffer
#define VL_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer VL_init_buffer
#endif

#ifdef yy_flush_buffer
#define VL_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer VL_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define VL_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state VL_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define VL_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer VL_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define VLpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state VLpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define VLpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state VLpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define VLensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack VLensure_buffer_stack
#endif

#ifdef yylex
#define VLlex_ALREADY_DEFINED
#else
#define yylex VLlex
#endif

#ifdef yyrestart
#define VLrestart_ALREADY_DEFINED
#else
#define yyrestart VLrestart
#endif

#ifdef yylex_init
#define VLlex_init_ALREADY_DEFINED
#else
#define yylex_init VLlex_init
#endif

#ifdef yylex_init_extra
#define VLlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra VLlex_init_extra
#endif

#ifdef yylex_destroy
#define VLlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy VLlex_destroy
#endif

#ifdef yyget_debug
#define VLget_debug_ALREADY_DEFINED
#else
#define yyget_debug VLget_debug
#endif

#ifdef yyset_debug
#define VLset_debug_ALREADY_DEFINED
#else
#define yyset_debug VLset_debug
#endif

#ifdef yyget_extra
#define VLget_extra_ALREADY_DEFINED
#else
#define yyget_extra VLget_extra
#endif

#ifdef yyset_extra
#define VLset_extra_ALREADY_DEFINED
#else
#define yyset_extra VLset_extra
#endif

#ifdef yyget_in
#define VLget_in_ALREADY_DEFINED
#else
#define yyget_in VLget_in
#endif

#ifdef yyset_in
#define VLset_in_ALREADY_DEFINED
#else
#define yyset_in VLset_in
#endif

#ifdef yyget_out
#define VLget_out_ALREADY_DEFINED
#else
#define yyget_out VLget_out
#endif

#ifdef yyset_out
#define VLset_out_ALREADY_DEFINED
#else
#define yyset_out VLset_out
#endif

#ifdef yyget_leng
#define VLget_leng_ALREADY_DEFINED
#else
#define yyget_leng VLget_leng
#endif

#ifdef yyget_text
#define VLget_text_ALREADY_DEFINED
#else
#define yyget_text VLget_text
#endif

#ifdef yyget_lineno
#define VLget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno VLget_lineno
#endif

#ifdef yyset_lineno
#define VLset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno VLset_lineno
#endif

#ifdef yywrap
#define VLwrap_ALREADY_DEFINED
#else
#define yywrap VLwrap
#endif

#ifdef yyalloc
#define VLalloc_ALREADY_DEFINED
#else
#define yyalloc VLalloc
#endif

#ifdef yyrealloc
#define VLrealloc_ALREADY_DEFINED
#else
#define yyrealloc VLrealloc
#endif

#ifdef yyfree
#define VLfree_ALREADY_DEFINED
#else
#define yyfree VLfree
#endif

#ifdef yytext
#define VLtext_ALREADY_DEFINED
#else
#define yytext VLtext
#endif

#ifdef yyleng
#define VLleng_ALREADY_DEFINED
#else
#define yyleng VLleng
#endif

#ifdef yyin
#define VLin_ALREADY_DEFINED
#else
#define yyin VLin
#endif

#ifdef yyout
#define VLout_ALREADY_DEFINED
#else
#define yyout VLout
#endif

#ifdef yy_flex_debug
#define VL_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug VL_flex_debug
#endif

#ifdef yylineno
#define VLlineno_ALREADY_DEFINED
#else
#define yylineno VLlineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 201
#define YY_END_OF_BUFFER 202
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[944] =
    {   0,
      202,  199,  200,  201,    3,  199,  200,  201,    4,  200,
      201,   67,  199,  200,  201,   68,  199,  200,  201,   67,
      199,  200,  201,  199,  200,  201,   67,  199,  200,  201,
       67,  199,  200,  201,  199,  200,  201,   67,  199,  200,
      201,   67,  199,  200,  201,   67,  199,  200,  201,   67,
      199,  200,  201,   67,  199,  200,  201,   67,  199,  200,
      201,  119,  199,  200,  201,   67,  199,  200,  201,   67,
      199,  200,  201,   67,  199,  200,  201,   67,  199,  200,
      201,  110,  199,  200,  201,  199,  200,  201,   67,  199,
      200,  201,  199,  200,  201,   67,  199,  200,  201,   67,

      199,  200,  201,    3,  199,  200,  201,    3,  199,  200,
      201,   67,  199,  200,  201,  199,  200,  201,   12,  200,
      201,   14,  200,  201,   12,  200,  201,   12,  200,  201,
      200,  201,    9,  200,  201,   10,  200,  201,   74,  200,
      201,   72,  200,  201,   73,   74,  200,  201,   74,  200,
      201,   67,  199,  200,  201,   67,   99,  199,  200,  201,
       67,   99,  199,  200,  201,   99,  119,  199,  200,  201,
       67,   99,  199,  200,  201,   67,   99,  199,  200,  201,
       91,  110,  199,  200,  201,   94,  110,  199,  200,  201,
       93,  110,  199,  200,  201,   92,  110,  199,  200,  201,

       97,  110,  199,  200,  201,   98,  110,  199,  200,  201,
       95,  110,  199,  200,  201,   96,  110,  199,  200,  201,
      132,  200,  201,  131,  132,  200,  201,  130,  200,  201,
      132,  200,  201,  127,  132,  200,  201,  138,  200,  201,
      137,  138,  200,  201,  136,  200,  201,  138,  200,  201,
      138,  200,  201,  133,  138,  200,  201,  144,  200,  201,
      143,  144,  200,  201,  142,  200,  201,  139,  144,  200,
      201,  145,  200,  201,  155,  200,  201,  154,  155,  200,
      201,  153,  200,  201,  155,  200,  201,  150,  155,  200,
      201,  156,  200,  201,  187,  200,  201,  186,  187,  200,

      201,  185,  200,  201,  187,  200,  201,  182,  187,  200,
      201,  188,  200,  201,  178,  200,  201,  177,  178,  200,
      201,  176,  200,  201,  178,  200,  201,  178,  200,  201,
      179,  200,  201,  119,  199,  200,  201,  119,  199,  200,
      201,   66,   67,  199,  200,  201,  110,  199,  200,  201,
      110,  199,  200,  201,  123,  200,  201,   30,  112,   52,
       36,   53,  118,   62,   16,   17,   23,   50,   28,   60,
       45,   48,   61,   46,   49,   43,   18,   11,    8,   51,
      119,  122,  122,  120,   63,   47,   19,   24,   29,   26,
       25,   21,  110,  111,   55,   41,  198,  197,  197,  197,

      197,  197,  197,  197,  197,  197,  197,   54,   35,   42,
       40,   39,  197,  197,  197,  197,  197,  197,  197,  197,
       15,   13,   71,   70,   69,  131,  129,  128,  127,  137,
      135,  134,  133,  143,  141,  140,  145,  154,  152,  151,
      150,  156,  186,  184,  183,  182,  188,  177,  173,  175,
      174,  179,  100,  119,  101,  102,  103,  119,  104,  105,
      106,  110,  107,  110,  108,  110,  109,  110,   32,   34,
       38,  115,  113,  114,  117,  116,   65,   27,   44,   64,
      124,  125,   37,   20,   56,   31,   33,   57,   22,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,

      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      127,  115,  113,  114,  117,  116,  124,  121,  121,  125,
       58,   59,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,   79,   84,   80,   85,
       87,   86,   75,   76,   78,   77,   88,   89,   90,   82,
       83,   81,  124,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  190,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  124,  197,  197,  197,  197,  197,  197,  197,

      197,  197,  197,  197,  190,  197,  197,  197,  197,  190,
      190,  190,  197,  191,  197,  197,  192,  197,  193,  197,
      197,  197,  197,  197,  197,  196,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  191,
      192,  193,    1,    1,  197,  189,  197,  197,  197,  191,
      191,  191,  197,  197,  192,  192,  192,  197,  193,  193,
      193,  197,  194,  197,  197,    2,    2,  197,  158,  197,
      197,  196,  196,  196,  197,  171,  197,  197,  197,  197,
      197,  197,  197,  197,  169,  197,  197,  197,  197,  189,
      194,  158,  171,  197,  189,  189,  189,  197,  197,  197,

      197,  194,  194,  194,  197,  195,  197,  197,  158,  158,
      158,  197,  197,  171,  171,  171,  197,  197,  197,  197,
      197,  197,  197,  197,  148,  197,  197,  197,  197,  197,
      197,  197,  195,  195,  195,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  126,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  146,  197,  197,  197,
      197,  167,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  180,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,

      197,  197,  197,  197,  147,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  172,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  181,  197,  197,  197,  197,  197,  197,
      162,  197,  163,  197,  164,  197,  197,  197,  197,  170,
      197,  197,  197,  162,  163,  164,  170,  197,  197,  197,
      162,  162,  162,  197,  163,  163,  163,  197,  164,  164,
      164,  197,  197,  197,  197,  170,  170,  170,  197,  197,
      149,  197,  197,  197,  197,  197,  166,  197,  168,  197,
      197,  166,  168,  159,  197,  197,  197,  165,  197,  166,

      166,  166,  197,  168,  168,  168,  197,  157,  197,  159,
      165,  159,  159,  159,  197,  197,  197,  165,  165,  165,
      197,  197,  197,  197,  197,  197,  161,  197,  161,  160,
      197,  161,  161,  161,  197,    6,  160,  160,  160,  160,
      197,    7,    5
    } ;

static const flex_int16_t yy_accept[927] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    5,    9,
       12,   16,   20,   24,   27,   31,   35,   38,   42,   46,
       50,   54,   58,   62,   66,   70,   74,   78,   82,   86,
       89,   93,   96,  100,  104,  108,  112,  116,  119,  122,
      125,  128,  131,  133,  136,  139,  142,  145,  149,  152,
      156,  161,  166,  171,  176,  181,  186,  191,  196,  201,
      206,  211,  216,  221,  224,  228,  231,  234,  238,  241,

      245,  248,  251,  254,  258,  261,  265,  268,  272,  275,
      278,  282,  285,  288,  292,  295,  298,  302,  305,  308,
      312,  315,  318,  322,  325,  328,  331,  334,  338,  342,
      347,  351,  355,  358,  359,  360,  361,  362,  363,  364,
      364,  364,  364,  364,  364,  365,  365,  366,  367,  368,
      369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
      379,  380,  381,  381,  382,  382,  383,  384,  385,  386,
      387,  387,  388,  389,  390,  391,  392,  393,  394,  395,
      396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
      406,  407,  408,  409,  410,  411,  412,  413,  413,  413,

      413,  413,  414,  415,  416,  417,  418,  419,  420,  421,
      422,  423,  424,  425,  426,  426,  426,  426,  426,  426,
      427,  428,  429,  430,  431,  432,  433,  434,  435,  436,
      437,  438,  439,  440,  441,  442,  443,  444,  445,  446,
      447,  448,  449,  449,  450,  451,  452,  453,  455,  456,
      457,  459,  460,  461,  463,  465,  467,  469,  470,  471,
      472,  472,  473,  473,  474,  475,  475,  476,  476,  477,
      477,  477,  478,  479,  479,  480,  481,  481,  481,  481,
      482,  482,  483,  484,  485,  486,  487,  488,  489,  490,
      491,  492,  493,  494,  495,  496,  497,  498,  499,  499,

      499,  499,  499,  499,  499,  499,  499,  499,  500,  501,
      502,  503,  504,  505,  506,  507,  508,  509,  510,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  512,  513,  514,  515,
      516,  517,  517,  517,  518,  518,  519,  520,  521,  522,
      523,  524,  525,  526,  527,  528,  529,  530,  531,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  533,  534,  535,  536,  537,  538,  539,  540,  541,
      542,  543,  544,  545,  546,  547,  548,  549,  550,  551,
      552,  553,  554,  555,  556,  557,  558,  559,  560,  561,

      562,  563,  563,  563,  563,  564,  565,  566,  567,  568,
      569,  570,  571,  572,  573,  574,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  576,  577,  578,  579,  581,  582,  583,  584,  585,
      586,  587,  588,  589,  590,  591,  592,  593,  593,  593,
      594,  595,  596,  597,  598,  599,  600,  601,  602,  603,
      604,  605,  605,  605,  605,  605,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  607,  608,
      609,  610,  611,  612,  614,  616,  617,  619,  621,  622,
      623,  623,  624,  625,  626,  628,  629,  629,  629,  630,

      631,  632,  633,  634,  635,  636,  637,  638,  639,  640,
      640,  640,  640,  640,  641,  641,  642,  643,  643,  643,
      643,  643,  643,  644,  645,  646,  648,  649,  650,  651,
      652,  654,  655,  656,  657,  659,  660,  661,  663,  665,
      666,  667,  668,  669,  671,  672,  673,  674,  676,  678,
      678,  678,  679,  680,  681,  682,  683,  684,  685,  687,
      688,  689,  690,  690,  691,  691,  691,  691,  692,  692,
      693,  693,  694,  695,  696,  697,  699,  700,  701,  702,
      703,  704,  706,  708,  709,  710,  711,  713,  714,  715,
      716,  718,  718,  718,  719,  720,  721,  722,  723,  724,

      725,  727,  728,  729,  729,  729,  729,  729,  729,  729,
      730,  731,  732,  733,  734,  735,  737,  738,  739,  739,
      739,  740,  741,  742,  743,  744,  745,  746,  748,  749,
      749,  749,  749,  749,  749,  749,  750,  751,  752,  753,
      754,  755,  756,  756,  756,  757,  759,  760,  761,  762,
      764,  765,  766,  766,  766,  766,  766,  766,  766,  766,
      767,  768,  769,  770,  771,  772,  773,  773,  773,  774,
      775,  776,  777,  778,  779,  779,  779,  779,  779,  779,
      779,  779,  780,  781,  782,  783,  784,  785,  786,  786,
      786,  787,  788,  790,  791,  792,  793,  793,  793,  793,

      793,  793,  793,  793,  794,  795,  796,  797,  798,  799,
      800,  801,  802,  803,  803,  803,  804,  805,  807,  808,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  810,  811,  812,  813,  814,  815,  816,  817,  818,
      819,  819,  819,  821,  822,  823,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  825,  826,  827,
      828,  829,  830,  831,  832,  833,  834,  834,  834,  836,
      837,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  839,  840,  841,  843,  845,  847,  848,  849,
      850,  852,  852,  852,  853,  854,  854,  854,  854,  855,

      856,  857,  857,  857,  857,  858,  859,  860,  861,  862,
      863,  865,  866,  867,  869,  870,  871,  873,  874,  875,
      876,  877,  878,  880,  880,  880,  881,  883,  883,  883,
      883,  883,  883,  883,  884,  885,  886,  887,  889,  891,
      891,  891,  892,  892,  892,  892,  892,  893,  894,  896,
      897,  898,  900,  901,  902,  904,  905,  906,  908,  908,
      908,  910,  911,  911,  911,  912,  913,  914,  916,  917,
      918,  919,  920,  922,  922,  922,  922,  922,  923,  924,
      924,  924,  924,  924,  925,  926,  926,  926,  926,  926,
      927,  929,  929,  929,  929,  929,  930,  932,  933,  934,

      936,  936,  936,  936,  937,  938,  939,  940,  942,  942,
      942,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  944,  944
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       23,   23,   23,   23,   23,   24,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   32,   34,   35,   36,
       37,   38,   39,   40,   37,   41,   37,   42,   43,   44,
       40,   45,   46,   37,   40,   40,   40,   47,   40,   48,
       31,   49,   50,   51,   52,   53,   54,   55,   56,   57,

       58,   59,   60,   61,   62,   40,   63,   64,   65,   66,
       67,   68,   40,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   31,   80,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[81] =
    {   0,
        1,    2,    3,    4,    5,    6,    6,    6,    7,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    1,
        8,    8,    8,    8,    1,    1,    1,    1,    1,    9,
        1,   10,   10,   10,   10,   10,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   10,   10,    1,    1,
        1,   12,    1,   10,   10,   10,   10,   10,   10,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   10,   11,   10,    1,    1,    1
    } ;

static const flex_int16_t yy_base[973] =
    {   0,
        0,   79,   79,   81,    0,    0, 1904, 1900,   82,   84,
      121,   95,  102,  106,  168,  189,  110,  115, 1896, 1817,
      261,    0, 1737, 1651,  341,    0, 1650, 1649,  195,  201,
     1647, 1643,  162,  420,  389,  397, 1643, 5045, 5045, 5045,
     1613, 5045, 5045,    0, 1610,  110,  477,  208,  146,  124,
      189, 1622,  130,  537, 1610,  151,   64,  127,    0,    0,
       97,  434,   62,  429,  428,  469, 1567,  608, 5045, 5045,
     1607, 1608, 5045, 5045, 5045, 5045, 5045, 5045,  428,  612,
      214,  450,    0, 1594, 5045,    0,    0,    0,    0,    0,
        0,    0,    0, 5045,  217, 5045,  166, 1592, 5045,  242,

     5045,  210, 1536, 5045, 5045,  247, 5045,  211,    0, 5045,
      442, 5045,  226,    0,    0, 5045,  480, 5045,  236,    0,
        0, 5045,  491, 5045, 1592,  238,    0,  437,  432, 5045,
      428,  445, 5045,   99,    0, 5045, 1586, 5045, 5045,  545,
      668,  424,  576,  650, 5045,  514,  525, 5045, 5045, 5045,
     5045, 5045, 5045, 1559, 5045, 5045, 1552,  540, 5045, 5045,
      560, 5045,  561,    0,  622, 5045, 1507, 5045, 5045, 5045,
     1543,  459, 5045,  503, 5045, 5045,  507,    0,    0, 5045,
     5045,  568,  575,  623,  645,  652,  634,  585,  692,  699,
      716,  720, 5045, 5045, 5045, 5045, 5045,  724,  674,  690,

     1506,  732,  736,  748,  761,  765,  769,  777,  782, 5045,
     5045, 5045, 5045, 5045,  638,  611,  771,  519,  775,  786,
     5045, 5045, 1546,  801, 5045, 5045, 5045,  806, 5045, 5045,
        0,  810, 5045, 5045,    0,    0,  814, 5045, 5045,    0,
        0,  822, 1559, 1557, 5045, 5045,    0,    0, 5045, 5045,
        0, 5045, 5045,    0,    0,    0,    0, 5045, 5045, 5045,
      823,  809,  855,  812, 1508,  548,    0,  860,  845,  907,
      911, 5045, 5045,  886, 5045, 5045,  921,  926, 1480,  976,
      819,  917, 5045, 1518, 5045, 5045, 5045, 5045, 1514,  941,
      931,  945,  949,  953,  957,  968,  972,  976,  426,  555,

     1479, 1467, 1461, 1454, 1452, 1456, 1448,  981,  985, 1000,
     1005, 1012, 1016, 1024, 1047, 1051, 1055, 1071, 1062, 1496,
     1492, 1489, 1487, 1483, 1479, 1475, 1390, 1386, 1384, 1379,
     1377, 1372, 1370, 1365, 1364, 5045, 1059, 1061, 1324,    0,
     1074, 1318, 1304,    0, 1070, 5045, 1292, 1077, 5045, 5045,
     1107, 1128, 1135, 1139, 1143, 1150, 1154, 1158, 1162,  454,
     1282, 1281,  178,   87, 1276, 1287, 1272, 1276, 1264, 1268,
     1168, 1172, 1177, 1181, 1185, 1194, 1199, 1203, 1208, 1212,
     1222, 1230, 1239, 1246, 1250, 5045, 5045, 5045, 5045, 5045,
     5045, 5045, 5045, 5045, 5045, 5045, 5045, 5045, 5045, 5045,

     5045, 1267, 1248, 1242, 1253, 1256, 1266, 1276, 1280, 1284,
     1290, 1294, 1298, 1306, 1310, 1315,  162, 1262, 1256,  506,
     1251, 1240, 1240, 1234, 1216, 1224, 1212, 1209, 1209,  626,
     1322, 1326, 1330, 1334, 1406, 1342, 1485, 1489, 1493, 1352,
     1497, 1358, 1502, 1506, 1510, 1514, 1518, 1185, 1186, 1343,
     1522, 1526, 1530, 1534, 1538, 1542, 1548, 1552, 1556, 1560,
     1573, 1173, 1172, 1161, 1181, 1366, 1175, 1164, 1164, 1161,
     1161, 1150, 1138, 1131, 1136,  703,  709, 1580, 1584, 1588,
     1593,    0, 1370, 1380, 1657, 1598, 1737, 1817, 1602, 1896,
      725, 1900, 1904, 1908, 1968, 1912, 1122, 1135, 2047, 2052,

     2056, 2060, 2064, 2068, 2072, 2076, 2080, 1918, 2084, 1121,
     1123, 1126, 1112, 1385, 1114, 1394, 1400, 1109, 1098, 1108,
     1100, 1099,    0,  770, 2088, 2159, 2092, 2096,    0, 1609,
     1615, 2100,    0, 1619, 1623,    0, 1627, 1631, 2239, 2318,
        0,  778, 2322, 2391, 2470,    0, 1643, 1647, 2540, 1080,
     1077, 2326, 2333, 2104, 2619, 2474, 2478, 2623, 1922, 2627,
     2631, 2482, 1072, 1926, 1074, 1077, 1080, 1930, 1056, 1934,
     1054, 1938, 2111,    0, 1942, 1946, 2635, 2337, 2639,    0,
     1952, 1957, 2707, 2486,    0, 2115, 2119, 2786,    0, 2127,
     2132, 1111, 1053, 2790, 2645, 2794, 2798, 2803, 2649, 2809,

     2138, 2813, 2817, 1062, 1041, 1051, 1034, 1029, 1009, 2821,
     2825, 2829, 2833,    0, 2143, 2148, 2837, 2654, 1009, 1005,
     2841, 2845, 2850, 2867, 2871, 2878, 2888, 2341, 2893,   45,
     1014, 1000,  999,  993, 1009, 2899, 2907, 2911, 2915, 2919,
     2923, 2930,  982, 2345, 2935, 2349, 2940, 2950, 2956, 2353,
     2945, 2960,  989,  974,  978,  966,  962,  953,  963, 2965,
     2969, 2975, 2981, 2989, 2993, 2998,  962, 3003, 3007, 3017,
     3021, 3027, 3031, 3035,  960,  950,  957,  925,  922,  940,
      935, 3041, 3046, 3051, 3056, 3061, 3065, 3070,  917,  913,
     3075, 3079, 2357, 3094, 3099, 3104,  926,  907, 1281,  901,

      909,  908,  894, 3108, 3128, 3132, 3136, 3141, 3145, 3155,
     3161, 3165, 3169,  894,  907, 3173, 3177, 2361, 3186, 3190,
      881,  895,  887,  891,  876,  869,  860,  864,  863,  851,
     3194, 3203, 3199, 3207, 3215, 3219, 3225, 3229, 3234, 3239,
      844,  840, 2365, 3245, 3250, 3255,  853,  844,  831,  828,
      834,  826,  840,  815,  808,  803, 3259, 3263, 3268, 3279,
     3284, 3289, 3293, 3297, 3306, 3311,  817,  802, 2369, 3316,
     3320,  798,  810,  788,  794,  783,  784,  775,  773,  765,
      751, 3324, 3329, 3333, 3402, 3482, 3562, 3342, 3641, 3645,
     3716,  762,  746, 3649, 3655,  743,  729,  729, 2375, 2380,

     2385,  731,  705,  698, 2490, 3795, 3799, 3803,    0, 2494,
     2498,    0, 2502, 2506,    0, 2510, 2514, 3807, 3811, 3815,
        0, 2518, 2522,  695,  705, 3819, 2527,  690,  678,  671,
      653,  650,  639, 3662, 3824, 3346, 3828, 3898, 3978,  629,
      625, 3832,  624,  606,  614,  592, 2532, 2658, 4058, 3836,
     4137, 4209,    0, 2662, 2666,    0, 2670, 2674,  594,  598,
     2678, 2682,  591,  563, 2694,    0, 2698, 3355, 4141, 4288,
        0, 3361, 3366,  547,  560,  542,  533, 3842, 4145,  581,
      509,  497,  488, 4292, 4149,  476,  535,  455,  464, 4296,
     4363,  450,  442, 3370,  415, 3374, 4443,    0, 3385, 3389,

      407, 3393, 3666, 5045, 3670,    0, 3674, 3678,  453, 3682,
     5045,  433, 3667, 3678,  433,  366,  191,  132,  128,   95,
       67,  104,   91, 5045, 5045, 4523, 4535, 4547, 4559, 4571,
     4583, 4595, 4607, 4619, 4631, 4643, 4655, 4661, 4667, 4679,
     4690, 4702, 4707, 4719, 4724, 4736, 4744, 4755, 4765, 4768,
     4780, 4792, 4804, 4816, 4828, 4840, 4852, 4864, 4876, 4888,
     4900, 4912, 4924, 4936, 4948, 4960, 4972, 4984, 4996, 5008,
     5020, 5032
    } ;

static const flex_int16_t yy_def[973] =
    {   0,
      925,    1,  926,  926,  927,  927,  928,  928,  929,  929,
        1,   11,  930,  930,  931,  931,  932,  932,  933,  933,
      925,   21,  934,  934,  925,   25,  935,  935,  936,  936,
      937,  937,    1,    1,  927,  927,  925,  925,  925,  925,
      925,  925,  925,  938,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  939,  940,
      925,  941,  925,  925,  925,  925,  925,  941,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,   54,  925,  925,  939,  939,  939,  939,  939,
      939,  939,  939,  925,  925,  925,  925,  925,  925,  925,

      925,  925,  925,  925,  925,  925,  925,  925,  942,  925,
      925,  925,  925,  943,  944,  925,  925,  925,  925,  945,
      946,  925,  925,  925,  947,  925,  948,   54,   54,  925,
      939,  939,  925,  925,  938,  925,  925,  925,  925,  925,
      925,  949,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,   54,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  939,  940,  925,
      925,  925,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  925,  925,  925,  925,  925,  925,  925,  925,

      925,  941,  941,  941,  941,  941,  941,  941,  941,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      942,  925,  925,  925,  943,  944,  925,  925,  925,  945,
      946,  925,  947,  947,  925,  925,  948,   54,  925,  925,
       54,  925,  925,  939,  939,  939,  939,  925,  925,  925,
      925,  925,  925,  925,  925,  949,  950,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  925,  925,

      925,  925,  925,  925,  925,  925,  925,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  950,
      925,  925,  925,  280,  925,  925,  925,  925,  925,  925,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,

      925,  925,  925,  925,  925,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      941,  941,  941,  941,  925,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  925,  925,  925,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  925,  925,  925,  925,  951,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  952,  941,  941,  941,
      941,  951,  951,  435,  925,  941,  925,  925,  941,  941,
      953,  941,  941,  941,  925,  941,  925,  925,  941,  941,

      941,  941,  941,  941,  941,  941,  941,  941,  941,  925,
      925,  925,  925,  954,  925,  955,  956,  925,  925,  925,
      925,  925,  952,  952,  941,  925,  941,  941,  954,  954,
      485,  941,  955,  955,  487,  956,  956,  488,  925,  941,
      953,  953,  941,  925,  941,  957,  957,  495,  925,  925,
      925,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  925,  958,  925,  925,  925,  959,  925,  960,
      925,  961,  941,  958,  958,  526,  941,  941,  941,  959,
      959,  539,  925,  941,  960,  960,  544,  941,  961,  961,
      549,  925,  925,  941,  941,  941,  941,  941,  941,  941,

      941,  941,  941,  925,  925,  925,  925,  925,  925,  941,
      941,  941,  941,  962,  962,  583,  941,  941,  925,  925,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  925,
      925,  925,  925,  925,  925,  941,  941,  941,  941,  941,
      941,  941,  925,  925,  941,  941,  941,  941,  941,  941,
      941,  941,  925,  925,  925,  925,  925,  925,  925,  941,
      941,  941,  941,  941,  941,  941,  925,  925,  941,  941,
      941,  941,  941,  941,  925,  925,  925,  925,  925,  925,
      925,  941,  941,  941,  941,  941,  941,  941,  925,  925,
      941,  941,  941,  941,  941,  941,  925,  925,  925,  925,

      925,  925,  925,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  925,  925,  941,  941,  941,  941,  941,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      925,  925,  941,  941,  941,  941,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  925,  925,  941,  941,
      941,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  941,  941,  941,  925,  925,  925,  941,  941,  941,
      925,  925,  925,  941,  941,  925,  925,  925,  963,  964,

      965,  925,  925,  925,  966,  941,  941,  941,  963,  963,
      785,  964,  964,  786,  965,  965,  787,  941,  941,  941,
      966,  966,  791,  925,  925,  941,  941,  925,  925,  925,
      925,  925,  925,  941,  941,  941,  941,  925,  925,  925,
      925,  941,  925,  925,  925,  925,  967,  968,  925,  941,
      941,  925,  967,  967,  838,  968,  968,  839,  925,  925,
      941,  969,  925,  925,  970,  969,  969,  849,  941,  941,
      970,  970,  852,  925,  925,  925,  925,  941,  941,  925,
      925,  925,  925,  941,  941,  925,  925,  925,  925,  941,
      925,  925,  925,  925,  925,  971,  925,  971,  971,  891,

      925,  925,  925,  925,  972,  972,  972,  897,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,    0,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925
    } ;

static const flex_int16_t yy_nxt[5126] =
    {   0,
       38,   39,   39,   40,   39,   41,   42,   43,   44,   45,
       46,   47,   48,   43,   49,   50,   43,   51,   52,   53,
       54,   54,   54,   54,   55,   43,   56,   57,   58,   43,
       43,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   60,   43,
       61,   59,   62,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   43,   63,   64,
       65,   66,   70,   66,   70,   77,   67,   77,   78,  193,
       78,  174,  175,   71,  924,   71,   65,   66,   72,   66,

       72,  653,   67,   95,   95,   96,   95,   95,   95,   96,
       95,  106,  106,  107,  106,  654,  106,  106,  107,  106,
      137,   97,  923,   98,  180,   97,  258,   98,  259,  108,
       79,   68,   79,   80,  108,   81,  922,  138,   82,  152,
      194,   83,   83,  423,  160,   84,   85,   68,  153,  161,
       85,  154,  424,   86,  176,  177,   87,  162,   88,  148,
      149,   89,   90,  921,   91,   92,  170,   93,  171,  100,
      100,  101,  100,  150,  151,   86,  181,  172,  173,   87,
      221,   88,  128,  129,   89,  222,   90,  102,   91,   92,
      100,  100,  101,  100,  920,   93,  123,  123,  124,  123,

      919,  125,  123,  123,  124,  123,  155,  125,  102,  146,
      146,  130,  146,  156,  126,  462,  157,  158,  220,  220,
      126,  220,  147,  463,  225,  229,  103,  148,  149,  226,
      230,  421,  103,  103,  422,  103,  131,  104,  132,  103,
      233,  150,  151,  224,  224,  234,  224,  103,  228,  228,
      238,  228,  245,  103,  103,  239,  103,  246,  104,  918,
      103,  110,  111,  111,  112,  111,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      113,  114,  114,  114,  114,  110,  110,  110,  110,  110,
      110,  110,  114,  114,  114,  114,  114,  114,  114,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,  110,
      110,  110,  114,  110,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  110,  110,
      110,  116,  117,  117,  118,  117,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      119,  120,  120,  120,  120,  116,  116,  116,  116,  116,
      116,  116,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  116,
      116,  116,  120,  116,  120,  120,  120,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  116,  116,
      116,   65,   66,  917,   66,  133,  266,   67,  266,  198,
      198,  212,  198,  133,  213,  182,  182,  916,  182,  195,
      128,  129,  133,  232,  232,  913,  232,  133,  254,  255,
      133,  133,  251,  133,  133,  133,  133,  912,  248,  133,
      133,  133,  133,  909,  133,  256,  257,  155,  133,  130,
      198,  198,   68,  198,  156,  905,  214,  157,  158,  196,
      199,  237,  237,  360,  237,  284,  285,  361,  184,  185,
      186,  187,  242,  242,  131,  242,  132,  139,  139,  188,

      902,  189,  190,  901,  191,  192,  252,  197,  253,  140,
      141,  249,  417,  250,  142,  146,  146,  418,  146,  143,
      896,  200,  144,  139,  139,  895,  271,  271,  270,  271,
      286,  140,  287,  141,  288,  289,  892,  142,  272,  330,
      331,  274,  274,  143,  274,  889,  144,  261,  332,  261,
      266,  139,  266,  139,  145,  163,  888,  164,  164,  164,
      164,  277,  277,  466,  278,  262,  262,  467,  275,  182,
      182,  165,  182,  166,  262,  887,  925,  925,  268,  925,
      268,  280,  280,  280,  280,  886,  925,  925,  164,  925,
      166,  262,  262,  893,  165,  167,  269,  269,  269,  166,

      894,  167,  167,  883,  167,  269,  168,  882,  167,  182,
      182,  881,  182,  146,  146,  880,  146,  276,  362,  262,
      363,  262,  269,  269,  925,  925,  147,  925,  477,  279,
      477,  323,  215,  216,  877,  925,  925,  281,  925,  281,
      324,  217,  282,  282,  282,  282,  925,  925,  876,  925,
      269,  294,  269,  925,  925,  875,  925,  325,  218,  320,
      874,  865,  184,  185,  202,  203,  219,  321,  864,  204,
      263,  205,  263,  206,  863,  207,  190,  208,  191,  209,
      290,  862,  140,  141,  322,  325,  218,  142,  264,  264,
      264,  264,  143,  925,  925,  860,  925,  265,  859,  293,

      925,  925,  291,  925,  140,  491,  141,  491,  848,  292,
      142,  524,  322,  524,  265,  265,  143,  925,  925,  847,
      925,  925,  925,  846,  925,  198,  198,  542,  198,  542,
      299,  300,  845,  925,  925,  301,  925,  925,  925,  302,
      925,  303,  265,  304,  265,  305,  299,  300,  844,  925,
      925,  301,  925,  306,  843,  302,  296,  303,  841,  304,
      295,  305,  925,  925,  840,  925,  925,  925,  833,  925,
      925,  925,  524,  925,  524,  832,  199,  297,  925,  925,
      542,  925,  542,  925,  925,  298,  925,  220,  220,  308,
      220,  326,  327,  309,  831,  333,  334,  830,  829,  310,

      328,  311,  224,  224,  828,  224,  312,  228,  228,  825,
      228,  232,  232,  313,  232,  237,  237,  329,  237,  824,
      805,  335,  314,  242,  242,  261,  242,  261,  804,  337,
      337,  315,  338,  338,  338,  338,  803,  316,  337,  282,
      282,  282,  282,  262,  262,  329,  802,  318,  317,  335,
      801,  319,  262,  800,  799,  337,  337,  263,  798,  263,
      337,  797,  268,  338,  268,  341,  341,  341,  796,  262,
      262,  793,  792,  781,  341,  264,  264,  264,  264,  780,
      269,  269,  269,  337,  265,  337,  779,  274,  274,  269,
      274,  341,  341,  778,  777,  776,  341,  262,  775,  262,

      774,  265,  265,  773,  772,  768,  269,  269,  271,  271,
      767,  271,  271,  271,  756,  271,  755,  754,  753,  341,
      272,  341,  277,  277,  272,  277,  752,  277,  277,  265,
      277,  265,  925,  925,  269,  925,  269,  348,  348,  348,
      348,  751,  925,  925,  750,  925,  925,  925,  749,  925,
      925,  925,  748,  925,  925,  925,  747,  925,  925,  925,
      742,  925,  741,  276,  342,  730,  729,  728,  348,  925,
      925,  727,  925,  925,  925,  722,  925,  925,  925,  721,
      925,  715,  925,  925,  714,  925,  925,  925,  703,  925,
      279,  702,  701,  700,  352,  279,  344,  344,  344,  344,

      351,  925,  925,  353,  925,  354,  925,  925,  699,  925,
      345,  698,  346,  925,  925,  697,  925,  925,  925,  689,
      925,  681,  680,  356,  355,  925,  925,  344,  925,  346,
      679,  359,  678,  345,  347,  677,  358,  357,  346,  371,
      347,  347,  676,  347,  372,  168,  675,  347,  925,  925,
      667,  925,  925,  925,  373,  925,  925,  925,  375,  925,
      659,  376,  658,  925,  925,  657,  925,  656,  377,  374,
      655,  379,  925,  925,  644,  925,  643,  378,  635,  337,
      337,  338,  338,  338,  338,  404,  634,  404,  337,  380,
      405,  405,  405,  405,  341,  341,  341,  348,  348,  348,

      348,  633,  632,  341,  382,  337,  337,  631,  925,  925,
      337,  925,  338,  630,  620,  619,  381,  356,  355,  385,
      341,  341,  383,  609,  608,  341,  359,  384,  348,  925,
      925,  607,  925,  337,  606,  337,  925,  925,  605,  925,
      925,  925,  604,  925,  925,  925,  593,  925,  341,  592,
      341,  925,  925,  572,  925,  925,  925,  571,  925,  925,
      925,  570,  925,  925,  925,  569,  925,  568,  406,  925,
      925,  567,  925,  925,  925,  566,  925,  565,  925,  925,
      564,  925,  925,  925,  563,  925,  925,  925,  408,  925,
      409,  407,  551,  550,  410,  925,  925,  522,  925,  521,

      925,  925,  520,  925,  925,  925,  411,  925,  412,  925,
      925,  414,  925,  925,  925,  415,  925,  519,  518,  517,
      413,  431,  516,  925,  925,  433,  925,  515,  416,  432,
      434,  925,  925,  514,  925,  513,  512,  511,  435,  437,
      925,  925,  436,  925,  510,  409,  498,  925,  925,  410,
      925,  925,  925,  497,  925,  438,  439,  925,  925,  440,
      925,  411,  405,  405,  405,  405,  476,  925,  925,  442,
      925,  441,  475,  450,  450,  450,  450,  925,  925,  474,
      925,  925,  925,  473,  925,  925,  925,  472,  925,  444,
      471,  925,  925,  443,  925,  925,  925,  470,  925,  925,

      925,  469,  925,  446,  450,  468,  445,  925,  925,  465,
      925,  925,  925,  447,  925,  464,  925,  925,  449,  925,
      448,  451,  452,  925,  925,  430,  925,  925,  925,  429,
      925,  925,  925,  428,  925,  925,  925,  723,  925,  427,
      426,  455,  454,  925,  925,  425,  925,  453,  724,  457,
      420,  419,  725,  925,  925,  458,  925,  726,  456,  925,
      491,  168,  491,  450,  450,  450,  450,  483,  483,  403,
      483,  483,  483,  402,  483,  339,  459,  401,  400,  460,
      461,  482,  482,  399,  482,  398,  530,  530,  481,  530,
      397,  479,  396,  478,  450,  534,  534,  395,  534,  394,

      485,  537,  537,  393,  537,  480,  482,  483,  483,  489,
      483,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  482,  482,  482,  484,  482,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  482,  482,  482,  925,  925,  392,  925,
      925,  925,  391,  925,  925,  925,  390,  925,  925,  925,

      389,  925,  388,  925,  925,  387,  925,  925,  925,  386,
      925,  925,  925,  370,  925,  925,  925,  369,  925,  925,
      925,  368,  925,  925,  925,  367,  925,  925,  925,  366,
      925,  925,  925,  365,  925,  925,  925,  364,  925,  925,
      925,  350,  925,  925,  925,  349,  925,  487,  486,  925,
      925,  488,  925,  925,  925,  343,  925,  925,  925,  339,
      925,  925,  925,  244,  925,  244,  336,  307,  490,  492,
      493,  283,  495,  499,  925,  925,  168,  925,  494,  496,
      273,  925,  925,  500,  925,  925,  925,  273,  925,  925,
      925,  502,  925,  501,  925,  925,  260,  925,  244,  925,

      925,  503,  925,  925,  925,  227,  925,  506,  504,  507,
      530,  530,  223,  530,  505,  508,  529,  529,  169,  529,
      534,  534,  211,  534,  533,  533,  210,  533,  537,  537,
      201,  537,  536,  536,  169,  536,  159,  136,  509,  527,
      134,  526,  925,  525,  547,  547,   73,  547,  546,  546,
       73,  546,   73,   73,   73,  532,  528,  529,  530,  530,
      539,  530,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,

      531,  531,  531,  531,  531,  529,  529,  529,  531,  529,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  529,  529,  529,  533,  534,  534,
       73,  534,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  533,  533,  533,  535,  533,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,

      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  533,  533,  533,  536,  537,  537,
       73,  537,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  536,  536,  536,  538,  536,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  536,  536,  536,  925,  925,   73,

      925,  925,  925,   75,  925,  925,  925,   75,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  575,  575,  925,
      575,  581,  581,  925,  581,  586,  586,  925,  586,  590,
      590,  925,  590,  575,  575,  925,  575,  574,  574,  925,
      574,  925,  540,  581,  581,  925,  581,  544,  580,  580,
      925,  580,  925,  925,  925,  545,  549,  543,  546,  547,
      547,  561,  547,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  548,

      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  546,  546,  546,  548,
      546,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  546,  546,  546,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,

      925,  925,  925,  925,  925,  925,  925,  925,  925,  552,
      553,  925,  925,  925,  925,  925,  586,  586,  925,  586,
      585,  585,  925,  585,  925,  925,  554,  556,  590,  590,
      925,  590,  925,  589,  589,  555,  589,  558,  557,  925,
      925,  562,  925,  560,  615,  615,  559,  615,  925,  614,
      614,  579,  614,  578,  925,  596,  577,  925,  573,  574,
      575,  575,  610,  575,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,

      576,  576,  576,  576,  576,  576,  576,  574,  574,  574,
      576,  574,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  574,  574,  574,  580,
      581,  581,  925,  581,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  580,  580,  580,
      582,  580,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  580,  580,  580,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  668,  668,  925,  668,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  583,  810,  810,  925,  810,
      925,  813,  813,  594,  813,  925,  816,  816,  612,  816,
      584,  585,  586,  586,  595,  586,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  585,
      585,  585,  587,  585,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  585,  585,
      585,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  822,  822,  925,  822,  810,  810,  925,  810,  809,

      809,  925,  809,  813,  813,  925,  813,  812,  812,  925,
      812,  816,  816,  925,  816,  815,  815,  925,  815,  822,
      822,  925,  822,  821,  821,  925,  821,  925,  925,  925,
      598,  925,  925,  854,  854,  599,  854,  603,  925,  588,
      589,  590,  590,  617,  590,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  589,  589,
      589,  591,  589,  591,  591,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  589,  589,  589,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  857,
      857,  925,  857,  854,  854,  925,  854,  853,  853,  925,
      853,  857,  857,  925,  857,  856,  856,  925,  856,  925,
      925,  925,  925,  867,  867,  925,  867,  925,  600,  925,
      601,  925,  597,  925,  602,  872,  872,  925,  872,  867,

      867,  611,  867,  925,  626,  642,  613,  614,  615,  615,
      622,  615,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  614,  614,  614,  616,  614,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  614,  614,  614,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,

      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  618,  925,  925,  925,  623,
      625,  925,  925,  925,  624,  621,  627,  925,  925,  925,
      628,  925,  925,  925,  925,  925,  925,  636,  925,  925,
      925,  638,  925,  925,  925,  925,  623,  629,  925,  925,
      925,  637,  925,  925,  925,  925,  639,  925,  925,  640,

      925,  925,  646,  925,  925,  925,  641,  647,  925,  925,
      925,  925,  925,  925,  645,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  649,
      925,  925,  925,  925,  925,  648,  925,  925,  925,  925,
      925,  925,  925,  651,  925,  925,  925,  925,  650,  925,
      652,  925,  925,  925,  925,  925,  660,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  662,  925,
      925,  925,  925,  925,  925,  661,  925,  925,  925,  925,
      925,  663,  925,  925,  925,  925,  925,  664,  666,  925,
      925,  925,  665,  925,  925,  925,  925,  925,  925,  925,

      925,  669,  925,  925,  668,  668,  671,  668,  925,  925,
      670,  925,  925,  925,  925,  673,  674,  672,  925,  925,
      682,  925,  925,  925,  925,  925,  684,  925,  925,  925,
      683,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  687,  925,  925,  925,  925,  685,
      925,  688,  925,  925,  925,  925,  925,  925,  925,  686,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  690,  925,  691,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  696,  692,  695,  925,
      693,  925,  694,  925,  704,  925,  925,  925,  925,  925,

      925,  925,  925,  925,  925,  925,  925,  706,  925,  925,
      925,  925,  925,  925,  705,  925,  925,  925,  707,  711,
      925,  925,  708,  712,  925,  925,  710,  709,  925,  925,
      925,  716,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  713,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  718,  925,  925,  717,  719,  925,  925,  925,  925,
      720,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  731,  925,  732,  925,  925,  925,  734,
      925,  925,  925,  733,  925,  925,  925,  925,  925,  925,

      925,  925,  736,  925,  925,  925,  735,  925,  925,  925,
      925,  925,  925,  737,  738,  925,  925,  925,  739,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  740,  925,  925,  925,  925,  745,  925,  925,
      925,  925,  743,  925,  744,  757,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  746,  925,
      925,  925,  758,  925,  925,  925,  925,  925,  759,  925,
      925,  925,  925,  925,  925,  925,  761,  760,  763,  925,
      925,  925,  925,  925,  925,  925,  925,  762,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,

      764,  925,  769,  925,  925,  765,  770,  925,  925,  766,
      925,  925,  925,  925,  783,  925,  771,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  782,
      925,  925,  925,  925,  925,  925,  925,  925,  784,  785,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  786,  787,  866,  866,  925,  866,
      789,  925,  872,  872,  788,  872,  925,  871,  871,  790,
      871,  903,  903,  904,  903,  899,  899,  925,  899,  925,
      791,  925,  925,  925,  794,  806,  899,  899,  925,  899,
      898,  898,  795,  898,  910,  910,  911,  910,  807,  925,

      851,  808,  809,  810,  810,  818,  810,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      809,  809,  809,  811,  809,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  809,
      809,  809,  812,  813,  813,  925,  813,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,

      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      812,  812,  812,  814,  812,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  812,
      812,  812,  815,  816,  816,  925,  816,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      815,  815,  815,  817,  815,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  815,
      815,  815,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  903,  903,  904,
      903,  907,  907,  925,  907,  907,  907,  925,  907,  906,
      906,  925,  906,  910,  910,  911,  910,  914,  914,  914,
      914,  915,  925,  925,  925,  925,  925,  925,  914,  914,

      914,  914,  925,  925,  925,  925,  925,  925,  925,  925,
      826,  819,  827,  925,  925,  820,  821,  822,  822,  849,
      822,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  821,  821,  821,  823,  821,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  821,  821,  821,  925,  925,  925,  925,

      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  834,
      925,  925,  925,  925,  836,  925,  925,  925,  925,  835,
      925,  925,  925,  925,  925,  925,  925,  837,  925,  925,
      838,  925,  925,  925,  839,  925,  925,  925,  925,  861,
      925,  842,  850,  869,  925,  925,  925,  852,  853,  854,

      854,  884,  854,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  853,  853,  853,  855,
      853,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  853,  853,  853,  856,  857,
      857,  925,  857,  856,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,

      856,  856,  856,  856,  856,  856,  856,  856,  856,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  856,  856,  856,  858,
      856,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  856,  856,  856,  866,  867,
      867,  925,  867,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,

      868,  868,  868,  868,  868,  868,  866,  866,  866,  868,
      866,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  866,  866,  866,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,

      925,  925,  885,  925,  925,  891,  878,  925,  870,  871,
      872,  872,  925,  872,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  871,  871,  871,
      873,  871,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  871,  871,  871,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,

      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  897,  925,  879,  925,
      925,  925,  890,  898,  899,  899,  925,  899,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  900,  900,  900,  900,  900,  900,

      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      900,  898,  898,  898,  900,  898,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      898,  898,  898,  906,  907,  907,  925,  907,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  906,  906,  906,  908,  906,  908,  908,  908,  908,

      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      906,  906,  906,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,  105,  105,  105,  105,  105,

      105,  105,  105,  105,  105,  105,  105,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  135,  135,  925,
      135,  135,  135,  178,  178,  925,  178,  178,  178,  179,
      925,  925,  925,  925,  179,  179,  179,  179,  179,  179,
      179,  183,  183,  925,  183,  925,  925,  925,  925,  183,

      183,  183,  231,  231,  231,  925,  231,  231,  231,  231,
      231,  231,  231,  231,  235,  925,  235,  235,  235,  236,
      236,  236,  925,  236,  236,  236,  236,  236,  236,  236,
      236,  240,  925,  240,  240,  240,  241,  241,  241,  925,
      241,  241,  241,  241,  241,  241,  241,  241,  243,  243,
      243,  243,  925,  243,  243,  247,  247,  247,  925,  247,
      247,  247,  247,  247,  247,  247,  247,  267,  925,  267,
      925,  925,  267,  267,  267,  340,  340,  340,  925,  340,
      482,  482,  482,  925,  482,  482,  482,  482,  482,  482,
      482,  482,  523,  523,  523,  925,  523,  523,  523,  523,

      523,  523,  523,  523,  541,  541,  541,  925,  541,  541,
      541,  541,  541,  541,  541,  541,  529,  529,  529,  925,
      529,  529,  529,  529,  529,  529,  529,  529,  533,  533,
      533,  925,  533,  533,  533,  533,  533,  533,  533,  533,
      536,  536,  536,  925,  536,  536,  536,  536,  536,  536,
      536,  536,  546,  546,  546,  925,  546,  546,  546,  546,
      546,  546,  546,  546,  574,  574,  574,  925,  574,  574,
      574,  574,  574,  574,  574,  574,  580,  580,  580,  925,
      580,  580,  580,  580,  580,  580,  580,  580,  585,  585,
      585,  925,  585,  585,  585,  585,  585,  585,  585,  585,

      589,  589,  589,  925,  589,  589,  589,  589,  589,  589,
      589,  589,  614,  614,  614,  925,  614,  614,  614,  614,
      614,  614,  614,  614,  809,  809,  809,  925,  809,  809,
      809,  809,  809,  809,  809,  809,  812,  812,  812,  925,
      812,  812,  812,  812,  812,  812,  812,  812,  815,  815,
      815,  925,  815,  815,  815,  815,  815,  815,  815,  815,
      821,  821,  821,  925,  821,  821,  821,  821,  821,  821,
      821,  821,  853,  853,  853,  925,  853,  853,  853,  853,
      853,  853,  853,  853,  856,  856,  856,  925,  856,  856,
      856,  856,  856,  856,  856,  856,  866,  866,  866,  925,

      866,  866,  866,  866,  866,  866,  866,  866,  871,  871,
      871,  925,  871,  871,  871,  871,  871,  871,  871,  871,
      898,  898,  898,  925,  898,  898,  898,  898,  898,  898,
      898,  898,  906,  906,  906,  925,  906,  906,  906,  906,
      906,  906,  906,  906,   37,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,

      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925
    } ;

static const flex_int16_t yy_chk[5126] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    2,    3,    2,    4,    9,    2,   10,    9,   63,
       10,   57,   57,    3,  923,    4,   12,   12,    3,   12,

        4,  630,   12,   13,   13,   13,   13,   14,   14,   14,
       14,   17,   17,   17,   17,  630,   18,   18,   18,   18,
       46,   13,  922,   13,   61,   14,  134,   14,  134,   17,
        9,    2,   10,   11,   18,   11,  921,   46,   11,   50,
       63,   11,   11,  364,   53,   11,   11,   12,   50,   53,
       11,   50,  364,   11,   58,   58,   11,   53,   11,   49,
       49,   11,   11,  920,   11,   11,   56,   11,   56,   15,
       15,   15,   15,   49,   49,   11,   61,   56,   56,   11,
       97,   11,   33,   33,   11,   97,   11,   15,   11,   11,
       16,   16,   16,   16,  919,   11,   29,   29,   29,   29,

      918,   29,   30,   30,   30,   30,   51,   30,   16,   48,
       48,   33,   48,   51,   29,  417,   51,   51,   95,   95,
       30,   95,   48,  417,  102,  108,   15,   81,   81,  102,
      108,  363,   15,   15,  363,   15,   33,   15,   33,   15,
      113,   81,   81,  100,  100,  113,  100,   16,  106,  106,
      119,  106,  126,   16,   16,  119,   16,  126,   16,  917,
       16,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   34,   34,  916,   34,   35,  142,   34,  142,   65,
       65,   79,   65,   36,   79,   62,   62,  915,   62,   64,
       34,   34,   35,  111,  111,  912,  111,   35,  131,  131,
       36,   35,  129,   35,   35,   36,   35,  909,  128,   36,
       35,   36,   36,  901,   36,  132,  132,   82,   36,   34,
       66,   66,   34,   66,   82,  895,   79,   82,   82,   64,
       65,  117,  117,  299,  117,  172,  172,  299,   62,   62,
       62,   62,  123,  123,   34,  123,   34,   47,   47,   62,

      893,   62,   62,  892,   62,   62,  129,   64,  129,   47,
       47,  128,  360,  128,   47,  146,  146,  360,  146,   47,
      889,   66,   47,   47,   47,  888,  147,  147,  146,  147,
      174,   47,  174,   47,  177,  177,  886,   47,  147,  218,
      218,  158,  158,   47,  158,  883,   47,  140,  218,  140,
      266,   47,  266,   47,   47,   54,  882,   54,   54,   54,
       54,  161,  161,  420,  161,  140,  140,  420,  158,  182,
      182,   54,  182,   54,  140,  881,  183,  183,  143,  183,
      143,  163,  163,  163,  163,  880,  188,  188,   54,  188,
       54,  140,  140,  887,   54,   54,  143,  143,  143,   54,

      887,   54,   54,  877,   54,  143,   54,  876,   54,   68,
       68,  875,   68,   80,   80,  874,   80,  158,  300,  140,
      300,  140,  143,  143,  184,  184,   80,  184,  430,  161,
      430,  216,   80,   80,  864,  187,  187,  165,  187,  165,
      216,   80,  165,  165,  165,  165,  185,  185,  863,  185,
      143,  188,  143,  186,  186,  860,  186,  216,   80,  215,
      859,  846,   68,   68,   68,   68,   80,  215,  845,   68,
      141,   68,  141,   68,  844,   68,   68,   68,   68,   68,
      184,  843,  144,  144,  215,  216,   80,  144,  141,  141,
      141,  141,  144,  189,  189,  841,  189,  141,  840,  187,

      190,  190,  185,  190,  144,  476,  144,  476,  833,  186,
      144,  477,  215,  477,  141,  141,  144,  191,  191,  832,
      191,  192,  192,  831,  192,  198,  198,  491,  198,  491,
      199,  199,  830,  202,  202,  199,  202,  203,  203,  199,
      203,  199,  141,  199,  141,  199,  200,  200,  829,  204,
      204,  200,  204,  200,  828,  200,  190,  200,  825,  200,
      189,  200,  205,  205,  824,  205,  206,  206,  804,  206,
      207,  207,  524,  207,  524,  803,  198,  191,  208,  208,
      542,  208,  542,  209,  209,  192,  209,  220,  220,  202,
      220,  217,  217,  202,  802,  219,  219,  798,  797,  203,

      217,  203,  224,  224,  796,  224,  204,  228,  228,  793,
      228,  232,  232,  204,  232,  237,  237,  217,  237,  792,
      781,  219,  205,  242,  242,  261,  242,  261,  780,  262,
      262,  206,  264,  264,  264,  264,  779,  207,  262,  281,
      281,  281,  281,  261,  261,  217,  778,  209,  208,  219,
      777,  209,  261,  776,  775,  262,  262,  263,  774,  263,
      262,  773,  268,  264,  268,  269,  269,  269,  772,  261,
      261,  768,  767,  756,  269,  263,  263,  263,  263,  755,
      268,  268,  268,  262,  263,  262,  754,  274,  274,  268,
      274,  269,  269,  753,  752,  751,  269,  261,  750,  261,

      749,  263,  263,  748,  747,  742,  268,  268,  270,  270,
      741,  270,  271,  271,  730,  271,  729,  728,  727,  269,
      270,  269,  277,  277,  271,  277,  726,  278,  278,  263,
      278,  263,  291,  291,  268,  291,  268,  282,  282,  282,
      282,  725,  290,  290,  724,  290,  292,  292,  723,  292,
      293,  293,  722,  293,  294,  294,  721,  294,  295,  295,
      715,  295,  714,  274,  278,  703,  702,  701,  282,  296,
      296,  700,  296,  297,  297,  698,  297,  298,  298,  697,
      298,  690,  308,  308,  689,  308,  309,  309,  681,  309,
      277,  680,  679,  678,  291,  278,  280,  280,  280,  280,

      290,  310,  310,  292,  310,  293,  311,  311,  677,  311,
      280,  676,  280,  312,  312,  675,  312,  313,  313,  667,
      313,  659,  658,  295,  294,  314,  314,  280,  314,  280,
      657,  298,  656,  280,  280,  655,  297,  296,  280,  308,
      280,  280,  654,  280,  308,  280,  653,  280,  315,  315,
      643,  315,  316,  316,  309,  316,  317,  317,  311,  317,
      635,  311,  634,  319,  319,  633,  319,  632,  312,  310,
      631,  313,  318,  318,  620,  318,  619,  312,  609,  337,
      337,  338,  338,  338,  338,  345,  608,  345,  337,  314,
      345,  345,  345,  345,  341,  341,  341,  348,  348,  348,

      348,  607,  606,  341,  316,  337,  337,  605,  351,  351,
      337,  351,  338,  604,  593,  592,  315,  316,  315,  319,
      341,  341,  317,  571,  569,  341,  318,  318,  348,  352,
      352,  567,  352,  337,  566,  337,  353,  353,  565,  353,
      354,  354,  563,  354,  355,  355,  551,  355,  341,  550,
      341,  356,  356,  522,  356,  357,  357,  521,  357,  358,
      358,  520,  358,  359,  359,  519,  359,  518,  351,  371,
      371,  515,  371,  372,  372,  513,  372,  512,  373,  373,
      511,  373,  374,  374,  510,  374,  375,  375,  353,  375,
      354,  352,  498,  497,  354,  376,  376,  475,  376,  474,

      377,  377,  473,  377,  378,  378,  354,  378,  355,  379,
      379,  357,  379,  380,  380,  358,  380,  472,  471,  470,
      356,  371,  469,  381,  381,  372,  381,  468,  359,  371,
      373,  382,  382,  467,  382,  465,  464,  463,  374,  375,
      383,  383,  374,  383,  462,  376,  449,  384,  384,  376,
      384,  385,  385,  448,  385,  376,  377,  406,  406,  378,
      406,  376,  404,  404,  404,  404,  429,  407,  407,  380,
      407,  379,  428,  405,  405,  405,  405,  408,  408,  427,
      408,  409,  409,  426,  409,  410,  410,  425,  410,  382,
      424,  411,  411,  381,  411,  412,  412,  423,  412,  413,

      413,  422,  413,  384,  405,  421,  383,  414,  414,  419,
      414,  415,  415,  385,  415,  418,  416,  416,  403,  416,
      402,  406,  407,  431,  431,  370,  431,  432,  432,  369,
      432,  433,  433,  368,  433,  434,  434,  699,  434,  367,
      366,  410,  409,  436,  436,  365,  436,  408,  699,  412,
      362,  361,  699,  440,  440,  413,  440,  699,  411,  442,
      442,  347,  442,  450,  450,  450,  450,  466,  466,  343,
      466,  483,  483,  342,  483,  339,  414,  335,  334,  415,
      416,  484,  484,  333,  484,  332,  514,  514,  434,  514,
      331,  432,  330,  431,  450,  516,  516,  329,  516,  328,

      436,  517,  517,  327,  517,  433,  435,  435,  435,  440,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  437,  437,  326,  437,
      438,  438,  325,  438,  439,  439,  324,  439,  441,  441,

      323,  441,  322,  443,  443,  321,  443,  444,  444,  320,
      444,  445,  445,  307,  445,  446,  446,  306,  446,  447,
      447,  305,  447,  451,  451,  304,  451,  452,  452,  303,
      452,  453,  453,  302,  453,  454,  454,  301,  454,  455,
      455,  289,  455,  456,  456,  284,  456,  438,  437,  457,
      457,  439,  457,  458,  458,  279,  458,  459,  459,  265,
      459,  460,  460,  244,  460,  243,  223,  201,  441,  443,
      444,  171,  446,  451,  461,  461,  167,  461,  445,  447,
      157,  478,  478,  452,  478,  479,  479,  154,  479,  480,
      480,  454,  480,  453,  481,  481,  137,  481,  125,  486,

      486,  455,  486,  489,  489,  103,  489,  458,  456,  459,
      530,  530,   98,  530,  457,  460,  531,  531,   84,  531,
      534,  534,   72,  534,  535,  535,   71,  535,  537,  537,
       67,  537,  538,  538,   55,  538,   52,   45,  461,  480,
       41,  479,   37,  478,  547,  547,   32,  547,  548,  548,
       31,  548,   28,   27,   24,  486,  481,  485,  485,  485,
      489,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,

      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  487,  487,  487,
       23,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  488,  488,  488,
       20,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  490,  490,   19,

      490,  492,  492,    8,  492,  493,  493,    7,  493,  494,
      494,    0,  494,  496,  496,    0,  496,    0,    0,  508,
      508,    0,  508,  559,  559,    0,  559,  564,  564,    0,
      564,  568,  568,    0,  568,  570,  570,    0,  570,  572,
      572,    0,  572,  575,  575,    0,  575,  576,  576,    0,
      576,    0,  490,  581,  581,    0,  581,  493,  582,  582,
        0,  582,    0,    0,    0,  494,  496,  492,  495,  495,
      495,  508,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,

      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  499,  499,
        0,  499,    0,  500,  500,    0,  500,  501,  501,    0,
      501,  502,  502,    0,  502,  503,  503,    0,  503,  504,
      504,    0,  504,  505,  505,    0,  505,  506,  506,    0,
      506,  507,  507,    0,  507,  509,  509,    0,  509,  525,
      525,    0,  525,  527,  527,    0,  527,  528,  528,    0,

      528,  532,  532,    0,  532,  554,  554,    0,  554,  499,
      500,    0,  573,  573,    0,  573,  586,  586,    0,  586,
      587,  587,    0,  587,    0,    0,  501,  503,  590,  590,
        0,  590,    0,  591,  591,  502,  591,  505,  504,  601,
      601,  509,  601,  507,  615,  615,  506,  615,    0,  616,
      616,  532,  616,  528,    0,  554,  527,    0,  525,  526,
      526,  526,  573,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,

      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  539,
      539,  539,    0,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,

      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  540,
      540,    0,  540,  543,  543,    0,  543,  552,  552,    0,
      552,    0,    0,    0,  553,  553,    0,  553,  578,  578,
        0,  578,  628,  628,    0,  628,  644,  644,    0,  644,
      646,  646,    0,  646,  650,  650,    0,  650,  693,  693,
        0,  693,  718,  718,    0,  718,  743,  743,    0,  743,
      769,  769,    0,  769,    0,  540,  799,  799,    0,  799,
        0,  800,  800,  552,  800,    0,  801,  801,  578,  801,
      543,  544,  544,  544,  553,  544,  544,  544,  544,  544,

      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  545,  545,    0,  545,  556,  556,    0,  556,  557,
      557,    0,  557,  562,  562,    0,  562,  584,  584,    0,
      584,  805,  805,    0,  805,  810,  810,    0,  810,  811,

      811,    0,  811,  813,  813,    0,  813,  814,  814,    0,
      814,  816,  816,    0,  816,  817,  817,    0,  817,  822,
      822,    0,  822,  823,  823,    0,  823,    0,  827,  827,
      556,  827,    0,  847,  847,  557,  847,  562,    0,  545,
      549,  549,  549,  584,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,

      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      555,  555,    0,  555,  558,  558,    0,  558,  560,  560,
        0,  560,  561,  561,    0,  561,  577,  577,    0,  577,
      579,  579,    0,  579,    0,    0,  595,  595,    0,  595,
      599,  599,    0,  599,    0,  618,  618,    0,  618,  848,
      848,    0,  848,  854,  854,    0,  854,  855,  855,    0,
      855,  857,  857,    0,  857,  858,  858,    0,  858,  861,
      861,    0,  861,  862,  862,    0,  862,    0,  558,    0,
      560,    0,  555,    0,  561,  865,  865,    0,  865,  867,

      867,  577,  867,    0,  599,  618,  579,  583,  583,  583,
      595,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  588,  588,    0,
      588,  594,  594,    0,  594,  596,  596,    0,  596,  597,

      597,    0,  597,    0,  598,  598,    0,  598,    0,    0,
      600,  600,    0,  600,  602,  602,    0,  602,  603,  603,
        0,  603,  610,  610,    0,  610,  611,  611,    0,  611,
      612,  612,    0,  612,  613,  613,    0,  613,  617,  617,
        0,  617,  621,  621,    0,  621,  622,  622,    0,  622,
        0,  623,  623,    0,  623,  588,    0,    0,    0,  596,
      598,    0,    0,    0,  597,  594,  600,    0,  624,  624,
      602,  624,  625,  625,    0,  625,    0,  610,    0,  626,
      626,  611,  626,    0,    0,    0,  610,  603,    0,  627,
      627,  610,  627,    0,  629,  629,  612,  629,    0,  613,

      636,  636,  622,  636,    0,    0,  617,  623,  637,  637,
        0,  637,  638,  638,  621,  638,  639,  639,    0,  639,
      640,  640,    0,  640,  641,  641,    0,  641,    0,  625,
        0,  642,  642,    0,  642,  624,  645,  645,    0,  645,
        0,  647,  647,  627,  647,    0,  651,  651,  626,  651,
      629,  648,  648,    0,  648,    0,  636,  649,  649,    0,
      649,  652,  652,    0,  652,    0,  660,  660,  638,  660,
      661,  661,    0,  661,    0,  637,  662,  662,    0,  662,
        0,  639,  663,  663,    0,  663,    0,  640,  642,    0,
      664,  664,  641,  664,  665,  665,    0,  665,    0,  666,

      666,  645,  666,    0,  668,  668,  648,  668,  669,  669,
      647,  669,    0,    0,    0,  651,  652,  649,  670,  670,
      660,  670,  671,  671,    0,  671,  662,    0,  672,  672,
      661,  672,  673,  673,    0,  673,  674,  674,    0,  674,
        0,    0,  682,  682,  665,  682,    0,  683,  683,  663,
      683,  666,  684,  684,    0,  684,    0,  685,  685,  664,
      685,    0,  686,  686,    0,  686,  687,  687,    0,  687,
        0,  688,  688,  668,  688,  669,  691,  691,    0,  691,
      692,  692,    0,  692,    0,    0,  674,  670,  673,    0,
      671,    0,  672,    0,  682,  694,  694,    0,  694,    0,

      695,  695,    0,  695,    0,  696,  696,  684,  696,  704,
      704,    0,  704,    0,  683,    0,    0,    0,  684,  686,
        0,    0,  684,  687,    0,    0,  685,  684,    0,  705,
      705,  691,  705,  706,  706,    0,  706,  707,  707,    0,
      707,  688,  708,  708,    0,  708,  709,  709,    0,  709,
        0,  694,    0,    0,  692,  695,  710,  710,    0,  710,
      696,    0,  711,  711,    0,  711,  712,  712,    0,  712,
      713,  713,    0,  713,  716,  716,    0,  716,  717,  717,
        0,  717,    0,  704,    0,  705,    0,  719,  719,  707,
      719,  720,  720,  706,  720,  731,  731,    0,  731,    0,

      733,  733,  709,  733,  732,  732,  708,  732,  734,  734,
        0,  734,    0,  710,  711,    0,  735,  735,  712,  735,
      736,  736,    0,  736,    0,    0,  737,  737,    0,  737,
      738,  738,  713,  738,    0,  739,  739,  719,  739,    0,
      740,  740,  716,  740,  717,  731,  744,  744,    0,  744,
        0,  745,  745,    0,  745,    0,  746,  746,  720,  746,
      757,  757,  732,  757,  758,  758,    0,  758,  733,  759,
      759,    0,  759,    0,    0,    0,  735,  734,  737,    0,
      760,  760,    0,  760,    0,  761,  761,  736,  761,    0,
      762,  762,    0,  762,  763,  763,    0,  763,  764,  764,

      738,  764,  744,    0,    0,  739,  745,  765,  765,  740,
      765,    0,  766,  766,  758,  766,  746,  770,  770,    0,
      770,  771,  771,    0,  771,  782,  782,    0,  782,  757,
      783,  783,    0,  783,  784,  784,    0,  784,  759,  760,
        0,    0,    0,  788,  788,    0,  788,  836,  836,    0,
      836,    0,    0,    0,  761,  762,  868,  868,    0,  868,
      764,    0,  872,  872,  763,  872,    0,  873,  873,  765,
      873,  894,  894,  894,  894,  896,  896,    0,  896,    0,
      766,    0,    0,    0,  770,  782,  899,  899,    0,  899,
      900,  900,  771,  900,  902,  902,  902,  902,  783,    0,

      836,  784,  785,  785,  785,  788,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  786,  786,  786,    0,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,

      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  787,  787,  787,    0,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,

      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  789,  789,    0,  789,  790,  790,    0,  790,
      794,  794,    0,  794,    0,    0,  795,  795,    0,  795,
        0,    0,    0,  834,  834,    0,  834,  903,  903,  903,
      903,  905,  905,    0,  905,  907,  907,    0,  907,  908,
      908,    0,  908,  910,  910,  910,  910,  913,  913,  913,
      913,  914,    0,    0,    0,    0,    0,    0,  914,  914,

      914,  914,    0,    0,    0,    0,    0,    0,    0,    0,
      794,  789,  795,    0,    0,  790,  791,  791,  791,  834,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  806,  806,    0,  806,

      807,  807,    0,  807,  808,  808,    0,  808,  818,  818,
        0,  818,  819,  819,    0,  819,  820,  820,    0,  820,
      826,  826,    0,  826,    0,  835,  835,    0,  835,  837,
      837,    0,  837,  842,  842,    0,  842,  850,  850,    0,
      850,    0,    0,  878,  878,    0,  878,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  806,
        0,    0,    0,    0,  808,    0,    0,    0,    0,  807,
        0,    0,    0,    0,    0,    0,    0,  818,    0,    0,
      819,    0,    0,    0,  820,    0,    0,    0,    0,  842,
        0,  826,  835,  850,    0,    0,    0,  837,  838,  838,

      838,  878,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  839,  839,
      839,    0,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,

      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  849,  849,
      849,    0,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,

      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  851,  851,
        0,  851,  869,  869,    0,  869,  879,  879,    0,  879,
      885,  885,    0,  885,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  879,    0,    0,  885,  869,    0,  851,  852,
      852,  852,    0,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  870,
      870,    0,  870,  884,  884,    0,  884,  890,  890,    0,

      890,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  890,    0,  870,    0,
        0,    0,  884,  891,  891,  891,    0,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,

      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  897,  897,  897,    0,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,

      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  926,  926,  926,  926,  926,  926,  926,
      926,  926,  926,  926,  926,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  932,  932,  932,  932,  932,

      932,  932,  932,  932,  932,  932,  932,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  938,  938,    0,
      938,  938,  938,  939,  939,    0,  939,  939,  939,  940,
        0,    0,    0,    0,  940,  940,  940,  940,  940,  940,
      940,  941,  941,    0,  941,    0,    0,    0,    0,  941,

      941,  941,  942,  942,  942,    0,  942,  942,  942,  942,
      942,  942,  942,  942,  943,    0,  943,  943,  943,  944,
      944,  944,    0,  944,  944,  944,  944,  944,  944,  944,
      944,  945,    0,  945,  945,  945,  946,  946,  946,    0,
      946,  946,  946,  946,  946,  946,  946,  946,  947,  947,
      947,  947,    0,  947,  947,  948,  948,  948,    0,  948,
      948,  948,  948,  948,  948,  948,  948,  949,    0,  949,
        0,    0,  949,  949,  949,  950,  950,  950,    0,  950,
      951,  951,  951,    0,  951,  951,  951,  951,  951,  951,
      951,  951,  952,  952,  952,    0,  952,  952,  952,  952,

      952,  952,  952,  952,  953,  953,  953,    0,  953,  953,
      953,  953,  953,  953,  953,  953,  954,  954,  954,    0,
      954,  954,  954,  954,  954,  954,  954,  954,  955,  955,
      955,    0,  955,  955,  955,  955,  955,  955,  955,  955,
      956,  956,  956,    0,  956,  956,  956,  956,  956,  956,
      956,  956,  957,  957,  957,    0,  957,  957,  957,  957,
      957,  957,  957,  957,  958,  958,  958,    0,  958,  958,
      958,  958,  958,  958,  958,  958,  959,  959,  959,    0,
      959,  959,  959,  959,  959,  959,  959,  959,  960,  960,
      960,    0,  960,  960,  960,  960,  960,  960,  960,  960,

      961,  961,  961,    0,  961,  961,  961,  961,  961,  961,
      961,  961,  962,  962,  962,    0,  962,  962,  962,  962,
      962,  962,  962,  962,  963,  963,  963,    0,  963,  963,
      963,  963,  963,  963,  963,  963,  964,  964,  964,    0,
      964,  964,  964,  964,  964,  964,  964,  964,  965,  965,
      965,    0,  965,  965,  965,  965,  965,  965,  965,  965,
      966,  966,  966,    0,  966,  966,  966,  966,  966,  966,
      966,  966,  967,  967,  967,    0,  967,  967,  967,  967,
      967,  967,  967,  967,  968,  968,  968,    0,  968,  968,
      968,  968,  968,  968,  968,  968,  969,  969,  969,    0,

      969,  969,  969,  969,  969,  969,  969,  969,  970,  970,
      970,    0,  970,  970,  970,  970,  970,  970,  970,  970,
      971,  971,  971,    0,  971,  971,  971,  971,  971,  971,
      971,  971,  972,  972,  972,    0,  972,  972,  972,  972,
      972,  972,  972,  972,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,

      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexor.lex"
#line 6 "lexor.lex"
/*
 * Copyright (c) 1998-2022 Stephen Williams (steve@icarus.com)
 *
 *    This source code is free software; you can redistribute it
 *    and/or modify it in source code form under the terms of the GNU
 *    General Public License as published by the Free Software
 *    Foundation; either version 2 of the License, or (at your option)
 *    any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

# include "config.h"

      //# define YYSTYPE lexval

# include  <cstdarg>
# include  <iostream>
# include  "compiler.h"
# include  "parse_misc.h"
# include  "parse_api.h"
# include  "parse.h"
# include  <cctype>
# include  <cstring>
# include  "lexor_keyword.h"
# include  "discipline.h"
# include  <list>

using namespace std;

# define YY_USER_INIT reset_lexor();
# define yylval VLlval

# define YY_NO_INPUT

/*
 * Lexical location information is passed in the yylloc variable to th
 * parser. The file names, strings, are kept in a list so that I can
 * re-use them. The set_file_name function will return a pointer to
 * the name as it exists in the list (and delete the passed string.)
 * If the name is new, it will be added to the list.
 */
extern YYLTYPE yylloc;

char* yytext_string_filter(const char*str, size_t str_len)
{
      if (str == 0) return 0;
      char*buf = new char[str_len+1];
      size_t didx = 0;
      for (size_t sidx = 0 ; sidx < str_len ; sidx += 1, didx += 1) {
	    if (str[sidx] == 0) {
		  VLerror(yylloc, "error: Found nil (\\000) in string literal, replacing with space (\\015) character.");
		  buf[didx] = ' ';
	    } else if (str[sidx] == '\\') { /* Skip \\\n */
		  if ((sidx+1 < str_len) && (str[sidx+1] == '\n')) {
			sidx += 1;
			didx -= 1;
		  } else {
			buf[didx] = str[sidx];
		  }
	    } else {
		  buf[didx] = str[sidx];
	    }
      }
      buf[didx] = 0;
      return buf;
}

char* strdupnew(char const *str)
{
       return str ? strcpy(new char [strlen(str)+1], str) : 0;
}

static const char* set_file_name(char*text)
{
      perm_string path = filename_strings.make(text);
      delete[]text;

	/* Check this file name with the list of library file
	   names. If there is a match, then turn on the
	   pform_library_flag. This is how the parser knows that
	   modules declared in this file are library modules. */
      pform_library_flag = library_file_map[path];
      return path;
}

void reset_lexor();
static void line_directive();
static void line_directive2();
static void reset_all();

verinum*make_unsized_binary(const char*txt);
verinum*make_undef_highz_dec(const char*txt);
verinum*make_unsized_dec(const char*txt);
verinum*make_unsized_octal(const char*txt);
verinum*make_unsized_hex(const char*txt);

static int dec_buf_div2(char *buf);

static int get_timescale_scale(const char*cp);
static int get_timescale_const(int scale, const char*units);

static void process_ucdrive(const char*txt);

static list<int> keyword_mask_stack;

static int comment_enter;
static bool in_module = false;
static bool in_UDP = false;
bool in_celldefine = false;
UCDriveType uc_drive = UCD_NONE;
static int ts_state = 0;
static int ts_scale = 0;
static int ts_unit = 0;
static int ts_prec = 0;

/*
 * The parser sometimes needs to indicate to the lexor that the next
 * identifier needs to be understood in the context of a package. The
 * parser feeds back that left context with calls to the
 * lex_in_package_scope.
 */
static PPackage* in_package_scope = 0;
void lex_in_package_scope(PPackage*pkg)
{
      in_package_scope = pkg;
}

#line 2397 "<stdout>"

#line 2399 "<stdout>"

#define INITIAL 0
#define CCOMMENT 1
#define PCOMMENT 2
#define LCOMMENT 3
#define CSTRING 4
#define UDPTABLE 5
#define PPTIMESCALE_SCALE 6
#define PPTIMESCALE_UNITS 7
#define PPTIMESCALE_SLASH 8
#define PPTIMESCALE_ERROR 9
#define PPUCDRIVE 10
#define PPUCDRIVE_ERROR 11
#define PPDEFAULT_NETTYPE 12
#define PPDEFAULT_NETTYPE_ERROR 13
#define PPBEGIN_KEYWORDS 14
#define PPBEGIN_KEYWORDS_ERROR 15
#define EDGES 16
#define REAL_SCALE 17

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
//#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 167 "lexor.lex"


#line 170 "lexor.lex"
  /* Recognize the various line directives. */
#line 2645 "<stdout>"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 926 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 925 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];

find_rule: /* we branch to this label when backing up */

		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 171 "lexor.lex"
{ line_directive(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 172 "lexor.lex"
{ line_directive2(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 174 "lexor.lex"
{ ; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 175 "lexor.lex"
{ yylloc.first_line += 1; }
	YY_BREAK
/* C++ style comments start with / / and run to the end of the
     current line. These are very easy to handle. The meta-comments
     format is a little more tricky to handle, but do what we can. */
/* The lexor detects "// synthesis translate_on/off" meta-comments,
     we handle them here by turning on/off a flag. The pform uses
     that flag to attach implicit attributes to "initial" and
     "always" statements. */
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 186 "lexor.lex"
{ pre_process_failed(yytext); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 187 "lexor.lex"
{ pform_mc_translate_on(true); }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 188 "lexor.lex"
{ pform_mc_translate_on(false); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 189 "lexor.lex"
{ comment_enter = YY_START; BEGIN(LCOMMENT); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 190 "lexor.lex"
{ yymore(); }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 191 "lexor.lex"
{ yylloc.first_line += 1; BEGIN(comment_enter); }
	YY_BREAK
/* The contents of C-style comments are ignored, like white space. */
case 11:
YY_RULE_SETUP
#line 196 "lexor.lex"
{ comment_enter = YY_START; BEGIN(CCOMMENT); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 197 "lexor.lex"
{ ; }
	YY_BREAK
/* Check for a possible nested comment. */
case 13:
YY_RULE_SETUP
#line 199 "lexor.lex"
{ VLerror(yylloc, "error: Possible nested comment."); }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 200 "lexor.lex"
{ yylloc.first_line += 1; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 201 "lexor.lex"
{ BEGIN(comment_enter); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 204 "lexor.lex"
{ return K_PSTAR; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 205 "lexor.lex"
{ return K_STARP; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 206 "lexor.lex"
{ return K_DOTSTAR; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 207 "lexor.lex"
{ return K_LS; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 208 "lexor.lex"
{ return K_LS; /* Note: Functionally, <<< is the same as <<. */}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 209 "lexor.lex"
{ return K_RS; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 210 "lexor.lex"
{ return K_RSS; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 211 "lexor.lex"
{ return K_POW; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 212 "lexor.lex"
{ return K_LE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 213 "lexor.lex"
{ return K_GE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 214 "lexor.lex"
{ return K_EG; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 215 "lexor.lex"
{
			/*
			 * Resolve the ambiguity between the += assignment
			 * operator and +=> polarity edge path operator
			 *
			 * +=> should be treated as two separate tokens '+' and
			 * '=>' (K_EG), therefore we only consume the first
			 * character of the matched pattern i.e. either + or -
			 * and push back the rest of the matches text (=>) in
			 * the input stream.
			 */
			yyless(1);
			return yytext[0];
		}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 229 "lexor.lex"
{ return K_SG; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 230 "lexor.lex"
{ return K_EQ; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 231 "lexor.lex"
{ return K_NE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 232 "lexor.lex"
{ return K_CEQ; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 233 "lexor.lex"
{ return K_CNE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 234 "lexor.lex"
{ return K_WEQ; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 235 "lexor.lex"
{ return K_WNE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 236 "lexor.lex"
{ return K_LOR; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 237 "lexor.lex"
{ return K_LAND; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 238 "lexor.lex"
{ return K_LEQUIV; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 239 "lexor.lex"
{ return K_TAND; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 240 "lexor.lex"
{ return K_NOR; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 241 "lexor.lex"
{ return K_NXOR; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 242 "lexor.lex"
{ return K_NXOR; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 243 "lexor.lex"
{ return K_NAND; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 244 "lexor.lex"
{ return K_TRIGGER; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 245 "lexor.lex"
{ return K_NB_TRIGGER; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 246 "lexor.lex"
{ return K_PO_POS; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 247 "lexor.lex"
{ return K_PO_NEG; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 248 "lexor.lex"
{ return K_CONTRIBUTE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 249 "lexor.lex"
{ return K_PLUS_EQ; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 250 "lexor.lex"
{ return K_MINUS_EQ; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 251 "lexor.lex"
{ return K_MUL_EQ; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 252 "lexor.lex"
{ return K_DIV_EQ; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 253 "lexor.lex"
{ return K_MOD_EQ; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 254 "lexor.lex"
{ return K_AND_EQ; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 255 "lexor.lex"
{ return K_OR_EQ; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 256 "lexor.lex"
{ return K_XOR_EQ; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 257 "lexor.lex"
{ return K_LS_EQ; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 258 "lexor.lex"
{ return K_RS_EQ; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 259 "lexor.lex"
{ return K_LS_EQ; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 260 "lexor.lex"
{ return K_RSS_EQ; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 261 "lexor.lex"
{ return K_INCR; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 262 "lexor.lex"
{return K_DECR; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 263 "lexor.lex"
{ return K_LP; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 264 "lexor.lex"
{ return K_SCOPE_RES; }
	YY_BREAK
/* This is horrible. The Verilog systax uses "->" in a lot of places.
     The trickiest is in constraints, where it is not an operator at all
     but a constraint implication. This only turns up as a problem when
     the "->" is followed by a constraint_expression_list. If that shows
     up, then there will be a "{" to the right of the "->". In that case,
     turn the "->" into a K_CONSTRAINT_IMPL so that the parser can be
     written without the shift/reduce conflict. Ugh! */
case 64:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 273 "lexor.lex"
{ return gn_system_verilog()? K_CONSTRAINT_IMPL :  K_TRIGGER; }
	YY_BREAK
/* Watch out for the tricky case of (*). Cannot parse this as "(*"
     and ")", but since I know that this is really ( * ), replace it
     with "*" and return that. */
case 65:
YY_RULE_SETUP
#line 278 "lexor.lex"
{ return '*'; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 280 "lexor.lex"
{ BEGIN(0); return yytext[0]; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 281 "lexor.lex"
{ return yytext[0]; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 283 "lexor.lex"
{ BEGIN(CSTRING); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 284 "lexor.lex"
{ yymore(); /* Catch \\, which is a \ escaping itself */ }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 285 "lexor.lex"
{ yymore(); /* Catch \", which is an escaped quote */ }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 286 "lexor.lex"
{ yymore(); /* Catch \\n, which will be filtered out */
		yylloc.first_line += 1; }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 288 "lexor.lex"
{ BEGIN(0);
		yylval.text = yytext_string_filter(yytext, yyleng);
		VLerror(yylloc, "error: Missing closing quote for string.");
		yylloc.first_line += 1;
		return STRING; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 293 "lexor.lex"
{ BEGIN(0);
		yylval.text = yytext_string_filter(yytext, yyleng);
		yylval.text[strlen(yylval.text)-1] = 0;
		return STRING; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 297 "lexor.lex"
{ yymore(); }
	YY_BREAK
/* The UDP Table is a unique lexical environment. These are most
     tokens that we can expect in a table. */
case 75:
YY_RULE_SETUP
#line 301 "lexor.lex"
{ return '_'; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 302 "lexor.lex"
{ return '+'; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 303 "lexor.lex"
{ return '%'; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 304 "lexor.lex"
{ return '*'; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 305 "lexor.lex"
{ return 'r'; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 306 "lexor.lex"
{ return 'Q'; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 307 "lexor.lex"
{ return 'q'; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 308 "lexor.lex"
{ return 'f'; /* b0 is 10|00, but only 10 is meaningful */}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 309 "lexor.lex"
{ return 'r'; /* b1 is 11|01, but only 01 is meaningful */}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 310 "lexor.lex"
{ return 'P'; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 311 "lexor.lex"
{ return 'f'; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 312 "lexor.lex"
{ return 'M'; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 313 "lexor.lex"
{ return 'N'; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 314 "lexor.lex"
{ return 'F'; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 315 "lexor.lex"
{ return 'R'; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 316 "lexor.lex"
{ return 'B'; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 317 "lexor.lex"
{ return 'b'; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 318 "lexor.lex"
{ return 'l'; /* IVL extension */ }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 319 "lexor.lex"
{ return 'h'; /* IVL extension */ }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 320 "lexor.lex"
{ return 'f'; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 321 "lexor.lex"
{ return 'r'; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 322 "lexor.lex"
{ return 'x'; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 323 "lexor.lex"
{ return 'n'; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 324 "lexor.lex"
{ return 'p'; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 325 "lexor.lex"
{ return yytext[0]; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 327 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 328 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 329 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 330 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 331 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 332 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 333 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 334 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 335 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 336 "lexor.lex"
{ return K_edge_descriptor; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 338 "lexor.lex"
{
      int rc = lexor_keyword_code(yytext, yyleng);
      switch (rc) {
	  case IDENTIFIER:
	    yylval.text = strdupnew(yytext);
	    if (strncmp(yylval.text,"PATHPULSE$", 10) == 0)
		  rc = PATHPULSE_IDENTIFIER;
	    break;

	  case K_edge:
	    BEGIN(EDGES);
	    break;

	  case K_module:
	  case K_macromodule:
	    in_module = true;
	    break;

	  case K_endmodule:
	    in_module = false;
	    break;

	  case K_primitive:
	    in_UDP = true;
	    break;

	  case K_endprimitive:
	    in_UDP = false;
	    break;

	  case K_table:
	    BEGIN(UDPTABLE);
	    break;

	  default:
	    yylval.text = 0;
	    break;
      }

	/* Special case: If this is part of a scoped name, then check
	   the package for identifier details. For example, if the
	   source file is  foo::bar, the parse.y will note the
	   PACKAGE_IDENTIFIER and "::" token and mark the
	   "in_package_scope" variable. Then this lexor will see the
	   identifier here and interpret it in the package scope. */
      if (in_package_scope) {
	    if (rc == IDENTIFIER) {
		  if (typedef_t*type = pform_test_type_identifier(in_package_scope, yylval.text)) {
			yylval.type_identifier.text = yylval.text;
			yylval.type_identifier.type = type;
			rc = TYPE_IDENTIFIER;
		  }
	    }
	    in_package_scope = 0;
	    return rc;
      }

	/* If this identifier names a discipline, then return this as
	   a DISCIPLINE_IDENTIFIER and return the discipline as the
	   value instead. */
      if (rc == IDENTIFIER && gn_verilog_ams_flag) {
	    perm_string tmp = lex_strings.make(yylval.text);
	    map<perm_string,ivl_discipline_t>::iterator cur = disciplines.find(tmp);
	    if (cur != disciplines.end()) {
		  delete[]yylval.text;
		  yylval.discipline = (*cur).second;
		  rc = DISCIPLINE_IDENTIFIER;
	    }
      }

	/* If this identifier names a previously declared package, then
	   return this as a PACKAGE_IDENTIFIER instead. */
      if (rc == IDENTIFIER && gn_system_verilog()) {
	    if (PPackage*pkg = pform_test_package_identifier(yylval.text)) {
		  delete[]yylval.text;
		  yylval.package = pkg;
		  rc = PACKAGE_IDENTIFIER;
	    }
      }

	/* If this identifier names a previously declared type, then
	   return this as a TYPE_IDENTIFIER instead. */
      if (rc == IDENTIFIER && gn_system_verilog()) {
	    if (typedef_t*type = pform_test_type_identifier(yylloc, yylval.text)) {
		  yylval.type_identifier.text = yylval.text;
		  yylval.type_identifier.type = type;
		  rc = TYPE_IDENTIFIER;
	    }
      }

      return rc;
  }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 432 "lexor.lex"
{
      yylval.text = strdupnew(yytext+1);
      if (gn_system_verilog()) {
	    if (PPackage*pkg = pform_test_package_identifier(yylval.text)) {
		  delete[]yylval.text;
		  yylval.package = pkg;
		  return PACKAGE_IDENTIFIER;
	    }
      }
      if (gn_system_verilog()) {
	    if (typedef_t*type = pform_test_type_identifier(yylloc, yylval.text)) {
		  yylval.type_identifier.text = yylval.text;
		  yylval.type_identifier.type = type;
		  return TYPE_IDENTIFIER;
	    }
      }
      return IDENTIFIER;
  }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 451 "lexor.lex"
{
	/* The 1364-1995 timing checks. */
      if (strcmp(yytext,"$hold") == 0)
	    return K_Shold;
      if (strcmp(yytext,"$nochange") == 0)
	    return K_Snochange;
      if (strcmp(yytext,"$period") == 0)
	    return K_Speriod;
      if (strcmp(yytext,"$recovery") == 0)
	    return K_Srecovery;
      if (strcmp(yytext,"$setup") == 0)
	    return K_Ssetup;
      if (strcmp(yytext,"$setuphold") == 0)
	    return K_Ssetuphold;
      if (strcmp(yytext,"$skew") == 0)
	    return K_Sskew;
      if (strcmp(yytext,"$width") == 0)
	    return K_Swidth;
	/* The new 1364-2001 timing checks. */
      if (strcmp(yytext,"$fullskew") == 0)
	    return K_Sfullskew;
      if (strcmp(yytext,"$recrem") == 0)
	    return K_Srecrem;
      if (strcmp(yytext,"$removal") == 0)
	    return K_Sremoval;
      if (strcmp(yytext,"$timeskew") == 0)
	    return K_Stimeskew;

      if (strcmp(yytext,"$attribute") == 0)
	    return KK_attribute;

      if (gn_system_verilog() && strcmp(yytext,"$unit") == 0) {
	    yylval.package = pform_units.back();
	    return PACKAGE_IDENTIFIER;
      }

      yylval.text = strdupnew(yytext);
      return SYSTEM_IDENTIFIER; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 491 "lexor.lex"
{
      yylval.number = make_unsized_dec(yytext);
      return BASED_NUMBER;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 495 "lexor.lex"
{
      yylval.number = make_undef_highz_dec(yytext);
      return BASED_NUMBER;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 499 "lexor.lex"
{
      yylval.number = make_unsized_binary(yytext);
      return BASED_NUMBER;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 503 "lexor.lex"
{
      yylval.number = make_unsized_octal(yytext);
      return BASED_NUMBER;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 507 "lexor.lex"
{
      yylval.number = make_unsized_hex(yytext);
      return BASED_NUMBER;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 511 "lexor.lex"
{
      if (!gn_system_verilog()) {
	    VLwarn(yylloc, "warning: Using SystemVerilog 'N bit vector. "
                           "Use at least -g2005-sv to remove this warning.");
      }
      generation_t generation_save = generation_flag;
      generation_flag = GN_VER2005_SV;
      yylval.number = make_unsized_binary(yytext);
      generation_flag = generation_save;
      return UNBASED_NUMBER; }
	YY_BREAK
/* Decimal numbers are the usual. But watch out for the UDPTABLE
     mode, where there are no decimal numbers. Reject the match if we
     are in the UDPTABLE state. */
case 119:
YY_RULE_SETUP
#line 525 "lexor.lex"
{
      if (YY_START==UDPTABLE) {
	    REJECT;
      } else {
	    yylval.number = make_unsized_dec(yytext);
	    based_size = yylval.number->as_ulong();
	    return DEC_NUMBER;
      }
}
	YY_BREAK
/* This rule handles scaled time values for SystemVerilog. */
case 120:
YY_RULE_SETUP
#line 536 "lexor.lex"
{
      if (gn_system_verilog()) {
	    yylval.text = strdupnew(yytext);
	    return TIME_LITERAL;
      } else REJECT; }
	YY_BREAK
/* These rules handle the scaled real literals from Verilog-AMS. The
     value is a number with a single letter scale factor. If
     verilog-ams is not enabled, then reject this rule. If it is
     enabled, then collect the scale and use it to scale the value. */
case 121:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 546 "lexor.lex"
{
      if (!gn_verilog_ams_flag) REJECT;
      BEGIN(REAL_SCALE);
      yymore();  }
	YY_BREAK
case 122:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 551 "lexor.lex"
{
      if (!gn_verilog_ams_flag) REJECT;
      BEGIN(REAL_SCALE);
      yymore();  }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 556 "lexor.lex"
{
      size_t token_len = strlen(yytext);
      char*tmp = new char[token_len + 5];
      int scale = 0;
      strcpy(tmp, yytext);
      switch (tmp[token_len-1]) {
	  case 'a': scale = -18; break; /* atto- */
	  case 'f': scale = -15; break; /* femto- */
	  case 'p': scale = -12; break; /* pico- */
	  case 'n': scale = -9;  break; /* nano- */
	  case 'u': scale = -6;  break; /* micro- */
	  case 'm': scale = -3;  break; /* milli- */
	  case 'k': scale = 3;  break; /* kilo- */
	  case 'K': scale = 3;  break; /* kilo- */
	  case 'M': scale = 6;  break; /* mega- */
	  case 'G': scale = 9;  break; /* giga- */
	  case 'T': scale = 12; break; /* tera- */
	  default: assert(0); break;
      }
      snprintf(tmp+token_len-1, 5, "e%d", scale);
      yylval.realtime = new verireal(tmp);
      delete[]tmp;

      BEGIN(0);
      return REALTIME;  }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 582 "lexor.lex"
{
      yylval.realtime = new verireal(yytext);
      return REALTIME; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 586 "lexor.lex"
{
      yylval.realtime = new verireal(yytext);
      return REALTIME; }
	YY_BREAK
/* Notice and handle the `timescale directive. */
case 126:
YY_RULE_SETUP
#line 593 "lexor.lex"
{ ts_state = 0; BEGIN(PPTIMESCALE_SCALE); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 595 "lexor.lex"
{
      ts_scale = get_timescale_scale(yytext);
      BEGIN(PPTIMESCALE_UNITS); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 599 "lexor.lex"
{ comment_enter = PPTIMESCALE_SCALE; BEGIN(LCOMMENT); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 600 "lexor.lex"
{ comment_enter = PPTIMESCALE_SCALE; BEGIN(CCOMMENT); }
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 601 "lexor.lex"
{ yylloc.first_line += 1; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 602 "lexor.lex"
{ ; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 603 "lexor.lex"
{ BEGIN(PPTIMESCALE_ERROR); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 605 "lexor.lex"
{
      if (++ts_state == 1) {
            ts_unit = get_timescale_const(ts_scale, yytext);
            BEGIN(PPTIMESCALE_SLASH);
      } else {
            ts_prec = get_timescale_const(ts_scale, yytext);
            if (in_module) {
                  VLerror(yylloc, "error: timescale directive cannot be inside "
                          "a module definition.");
            }
            if (ts_unit < ts_prec) {
                  VLerror(yylloc, "error: timescale unit must not be less than "
                          "the precision.");
            } else {
                  pform_set_timescale(ts_unit, ts_prec, yylloc.text, yylloc.first_line);
            }
            BEGIN(0);
      } }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 624 "lexor.lex"
{ comment_enter = PPTIMESCALE_UNITS; BEGIN(LCOMMENT); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 625 "lexor.lex"
{ comment_enter = PPTIMESCALE_UNITS; BEGIN(CCOMMENT); }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 626 "lexor.lex"
{ yylloc.first_line += 1; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 627 "lexor.lex"
{ ; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 628 "lexor.lex"
{ BEGIN(PPTIMESCALE_ERROR); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 630 "lexor.lex"
{ BEGIN(PPTIMESCALE_SCALE); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 632 "lexor.lex"
{ comment_enter = PPTIMESCALE_SLASH; BEGIN(LCOMMENT); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 633 "lexor.lex"
{ comment_enter = PPTIMESCALE_SLASH; BEGIN(CCOMMENT); }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 634 "lexor.lex"
{ yylloc.first_line += 1; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 635 "lexor.lex"
{ ; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 636 "lexor.lex"
{ BEGIN(PPTIMESCALE_ERROR); }
	YY_BREAK
/* On error, try to recover by skipping to the end of the line. */
case 145:
YY_RULE_SETUP
#line 639 "lexor.lex"
{
      VLerror(yylloc, "error: Invalid `timescale directive.");
      BEGIN(0); }
	YY_BREAK
/* Notice and handle the `celldefine and `endcelldefine directives. */
case 146:
YY_RULE_SETUP
#line 645 "lexor.lex"
{ in_celldefine = true; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 646 "lexor.lex"
{ in_celldefine = false; }
	YY_BREAK
/* Notice and handle the `resetall directive. */
case 148:
YY_RULE_SETUP
#line 650 "lexor.lex"
{
      if (in_module) {
	    VLerror(yylloc, "error: `resetall directive cannot be inside a "
		    "module definition.");
      } else if (in_UDP) {
	    VLerror(yylloc, "error: `resetall directive cannot be inside a "
		    "UDP definition.");
      } else {
	    reset_all();
      } }
	YY_BREAK
/* Notice and handle the `unconnected_drive directive. */
case 149:
YY_RULE_SETUP
#line 663 "lexor.lex"
{ BEGIN(PPUCDRIVE); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 665 "lexor.lex"
{
      process_ucdrive(yytext);
      if (in_module) {
	    VLerror(yylloc, "error: `unconnected_drive directive cannot be "
		    "inside a module definition.");
      }
      BEGIN(0); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 673 "lexor.lex"
{ comment_enter = PPUCDRIVE; BEGIN(LCOMMENT); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 674 "lexor.lex"
{ comment_enter = PPUCDRIVE; BEGIN(CCOMMENT); }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 675 "lexor.lex"
{ yylloc.first_line += 1; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 676 "lexor.lex"
{ ; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 677 "lexor.lex"
{ BEGIN(PPUCDRIVE_ERROR); }
	YY_BREAK
/* On error, try to recover by skipping to the end of the line. */
case 156:
YY_RULE_SETUP
#line 680 "lexor.lex"
{
      VLerror(yylloc, "error: Invalid `unconnected_drive directive.");
      BEGIN(0); }
	YY_BREAK
/* Notice and handle the `nounconnected_drive directive. */
case 157:
YY_RULE_SETUP
#line 686 "lexor.lex"
{
      if (in_module) {
	    VLerror(yylloc, "error: `nounconnected_drive directive cannot be "
                    "inside a module definition.");
      }
      uc_drive = UCD_NONE; }
	YY_BREAK
/* These are directives that I do not yet support. I think that IVL
     should handle these, not an external preprocessor. */
/* From 1364-2005 Chapter 19. */
case 158:
YY_RULE_SETUP
#line 696 "lexor.lex"
{  }
	YY_BREAK
/* From 1364-2005 Annex D. */
case 159:
YY_RULE_SETUP
#line 699 "lexor.lex"
{  }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 700 "lexor.lex"
{  }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 701 "lexor.lex"
{  }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 702 "lexor.lex"
{  }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 703 "lexor.lex"
{  }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 704 "lexor.lex"
{  }
	YY_BREAK
/* From other places. */
case 165:
YY_RULE_SETUP
#line 707 "lexor.lex"
{  }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 708 "lexor.lex"
{  }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 709 "lexor.lex"
{  }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 710 "lexor.lex"
{  }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 711 "lexor.lex"
{  }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 712 "lexor.lex"
{  }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 713 "lexor.lex"
{  }
	YY_BREAK
/* Notice and handle the `begin_keywords directive. */
case 172:
YY_RULE_SETUP
#line 717 "lexor.lex"
{ BEGIN(PPBEGIN_KEYWORDS); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 719 "lexor.lex"
{
      keyword_mask_stack.push_front(lexor_keyword_mask);

      char*word = yytext+1;
      char*tail = strchr(word, '"');
      tail[0] = 0;
      if (strcmp(word,"1364-1995") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995;
      } else if (strcmp(word,"1364-2001") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG;
      } else if (strcmp(word,"1364-2001-noconfig") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001;
      } else if (strcmp(word,"1364-2005") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG
		                |GN_KEYWORDS_1364_2005;
      } else if (strcmp(word,"1800-2005") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG
		                |GN_KEYWORDS_1364_2005
		                |GN_KEYWORDS_1800_2005;
      } else if (strcmp(word,"1800-2009") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG
		                |GN_KEYWORDS_1364_2005
		                |GN_KEYWORDS_1800_2005
		                |GN_KEYWORDS_1800_2009;
      } else if (strcmp(word,"1800-2012") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG
		                |GN_KEYWORDS_1364_2005
		                |GN_KEYWORDS_1800_2005
		                |GN_KEYWORDS_1800_2009
		                |GN_KEYWORDS_1800_2012;
      } else if (strcmp(word,"VAMS-2.3") == 0) {
	    lexor_keyword_mask = GN_KEYWORDS_1364_1995
		                |GN_KEYWORDS_1364_2001
		                |GN_KEYWORDS_1364_2001_CONFIG
		                |GN_KEYWORDS_1364_2005
		                |GN_KEYWORDS_VAMS_2_3;
      } else {
	    fprintf(stderr, "%s:%d: Ignoring unknown keywords string: %s\n",
		    yylloc.text, yylloc.first_line, word);
      }
      BEGIN(0);
 }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 773 "lexor.lex"
{ comment_enter = PPBEGIN_KEYWORDS; BEGIN(LCOMMENT); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 774 "lexor.lex"
{ comment_enter = PPBEGIN_KEYWORDS; BEGIN(CCOMMENT); }
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 775 "lexor.lex"
{ yylloc.first_line += 1; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 776 "lexor.lex"
{ ; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 777 "lexor.lex"
{ BEGIN(PPBEGIN_KEYWORDS_ERROR); }
	YY_BREAK
/* On error, try to recover by skipping to the end of the line. */
case 179:
YY_RULE_SETUP
#line 780 "lexor.lex"
{
      VLerror(yylloc, "error: Invalid `begin_keywords directive.");
      BEGIN(0); }
	YY_BREAK
/* Notice and handle the `end_keywords directive. */
case 180:
YY_RULE_SETUP
#line 786 "lexor.lex"
{
      if (!keyword_mask_stack.empty()) {
	    lexor_keyword_mask = keyword_mask_stack.front();
	    keyword_mask_stack.pop_front();
      } else {
	    VLwarn(yylloc, "warning: Mismatched `end_keywords directive");
      }
 }
	YY_BREAK
/* Notice and handle the `default_nettype directive. */
case 181:
YY_RULE_SETUP
#line 797 "lexor.lex"
{ BEGIN(PPDEFAULT_NETTYPE); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 799 "lexor.lex"
{
      NetNet::Type net_type;
  /* Add support for other wire types and better error detection. */
      if (strcmp(yytext,"wire") == 0) {
	    net_type = NetNet::WIRE;

      } else if (strcmp(yytext,"tri") == 0) {
	    net_type = NetNet::TRI;

      } else if (strcmp(yytext,"tri0") == 0) {
	    net_type = NetNet::TRI0;

      } else if (strcmp(yytext,"tri1") == 0) {
	    net_type = NetNet::TRI1;

      } else if (strcmp(yytext,"wand") == 0) {
	    net_type = NetNet::WAND;

      } else if (strcmp(yytext,"triand") == 0) {
	    net_type = NetNet::TRIAND;

      } else if (strcmp(yytext,"wor") == 0) {
	    net_type = NetNet::WOR;

      } else if (strcmp(yytext,"trior") == 0) {
	    net_type = NetNet::TRIOR;

      } else if (strcmp(yytext,"none") == 0) {
	    net_type = NetNet::NONE;

      } else {
	    VLerror(yylloc, "error: Net type '%s' is not a valid (or supported) "
		            "default net type.", yytext);
	    net_type = NetNet::WIRE;
	    error_count += 1;
      }
      pform_set_default_nettype(net_type, yylloc.text, yylloc.first_line);
      BEGIN(0);
  }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 839 "lexor.lex"
{ comment_enter = PPDEFAULT_NETTYPE; BEGIN(LCOMMENT); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 840 "lexor.lex"
{ comment_enter = PPDEFAULT_NETTYPE; BEGIN(CCOMMENT); }
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 841 "lexor.lex"
{ yylloc.first_line += 1; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 842 "lexor.lex"
{ ; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 843 "lexor.lex"
{ BEGIN(PPDEFAULT_NETTYPE_ERROR); }
	YY_BREAK
/* On error, try to recover by skipping to the end of the line. */
case 188:
YY_RULE_SETUP
#line 846 "lexor.lex"
{
      VLerror(yylloc, "error: Invalid `default_nettype directive.");
      BEGIN(0); }
	YY_BREAK
/* These are directives that are not supported by me and should have
     been handled by an external preprocessor such as ivlpp. */
case 189:
YY_RULE_SETUP
#line 853 "lexor.lex"
{
      VLwarn(yylloc, "warning: `define not supported. Use an external preprocessor.");
  }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 857 "lexor.lex"
{
      VLwarn(yylloc, "warning: `else not supported. Use an external preprocessor.");
  }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 861 "lexor.lex"
{
      VLwarn(yylloc, "warning: `elsif not supported. Use an external preprocessor.");
  }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 865 "lexor.lex"
{
      VLwarn(yylloc, "warning: `endif not supported. Use an external preprocessor.");
  }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 869 "lexor.lex"
{
      VLwarn(yylloc, "warning: `ifdef not supported. Use an external preprocessor.");
  }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 873 "lexor.lex"
{
      VLwarn(yylloc, "warning: `ifndef not supported. Use an external preprocessor.");
  }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 877 "lexor.lex"
{
      VLwarn(yylloc, "warning: `include not supported. Use an external preprocessor.");
  }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 881 "lexor.lex"
{
      VLwarn(yylloc, "warning: `undef not supported. Use an external preprocessor.");
  }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 885 "lexor.lex"
{
      VLwarn(yylloc, "warning: Macro replacement not supported. "
             "Use an external preprocessor.");
  }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 891 "lexor.lex"
{ VLerror(yylloc, "error: Stray tic (`) here. Perhaps you put white "
                       "space between the tic and preprocessor directive?"); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 894 "lexor.lex"
{ return yytext[0]; }
	YY_BREAK
/* Final catchall. something got lost or mishandled. */
/* XXX Should we tell the user something about the lexical state? */
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 899 "lexor.lex"
{
      if (isprint(yytext[0]))
            VLerror(yylloc, "error: Unmatched character (%c).", yytext[0]);
      else
            VLerror(yylloc, "error: Unmatched character (0x%x).",
			    (unsigned char) yytext[0]);
}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 907 "lexor.lex"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4199 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(CCOMMENT):
			case YY_STATE_EOF(PCOMMENT):
			case YY_STATE_EOF(LCOMMENT):
			case YY_STATE_EOF(CSTRING):
			case YY_STATE_EOF(UDPTABLE):
			case YY_STATE_EOF(PPTIMESCALE_SCALE):
			case YY_STATE_EOF(PPTIMESCALE_UNITS):
			case YY_STATE_EOF(PPTIMESCALE_SLASH):
			case YY_STATE_EOF(PPTIMESCALE_ERROR):
			case YY_STATE_EOF(PPUCDRIVE):
			case YY_STATE_EOF(PPUCDRIVE_ERROR):
			case YY_STATE_EOF(PPDEFAULT_NETTYPE):
			case YY_STATE_EOF(PPDEFAULT_NETTYPE_ERROR):
			case YY_STATE_EOF(PPBEGIN_KEYWORDS):
			case YY_STATE_EOF(PPBEGIN_KEYWORDS_ERROR):
			case YY_STATE_EOF(EDGES):
			case YY_STATE_EOF(REAL_SCALE):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 926 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 926 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 925);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 907 "lexor.lex"


/*
 * The UDP state table needs some slightly different treatment by the
 * lexor. The level characters are normally accepted as other things,
 * so the parser needs to switch my mode when it believes in needs to.
 */
void lex_end_table()
{
      BEGIN(INITIAL);
}

static unsigned truncate_to_integer_width(verinum::V*bits, unsigned size)
{
      if (size <= integer_width) return size;

      verinum::V pad = bits[size-1];
      if (pad == verinum::V1) pad = verinum::V0;

      for (unsigned idx = integer_width; idx < size; idx += 1) {
	    if (bits[idx] != pad) {
		  VLwarn(yylloc, "warning: Unsized numeric constant truncated "
                                 "to integer width.");
		  break;
	    }
      }
      return integer_width;
}

verinum*make_unsized_binary(const char*txt)
{
      bool sign_flag = false;
      bool single_flag = false;
      const char*ptr = txt;
      assert(*ptr == '\'');
      ptr += 1;

      if (tolower(*ptr) == 's') {
	    sign_flag = true;
	    ptr += 1;
      }

      assert((tolower(*ptr) == 'b') || gn_system_verilog());
      if (tolower(*ptr) == 'b') {
	    ptr += 1;
      } else {
	    assert(sign_flag == false);
	    single_flag = true;
      }

      while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
	    ptr += 1;

      unsigned size = 0;
      for (const char*idx = ptr ;  *idx ;  idx += 1)
	    if (*idx != '_') size += 1;

      if (size == 0) {
	    VLerror(yylloc, "error: Numeric literal has no digits in it.");
	    verinum*out = new verinum();
	    out->has_sign(sign_flag);
	    out->is_single(single_flag);
	    return out;
      }

      if ((based_size > 0) && (size > based_size)) VLwarn(yylloc,
          "warning: Extra digits given for sized binary constant.");

      verinum::V*bits = new verinum::V[size];

      unsigned idx = size;
      while (*ptr) {
	    switch (ptr[0]) {
		case '0':
		  bits[--idx] = verinum::V0;
		  break;
		case '1':
		  bits[--idx] = verinum::V1;
		  break;
		case 'z': case 'Z': case '?':
		  bits[--idx] = verinum::Vz;
		  break;
		case 'x': case 'X':
		  bits[--idx] = verinum::Vx;
		  break;
		  case '_':
		  break;
		default:
		  fprintf(stderr, "%c\n", ptr[0]);
		  assert(0);
	    }
	    ptr += 1;
      }

      if (gn_strict_expr_width_flag && (based_size == 0))
	    size = truncate_to_integer_width(bits, size);

      verinum*out = new verinum(bits, size, false);
      out->has_sign(sign_flag);
      out->is_single(single_flag);
      delete[]bits;
      return out;
}


verinum*make_unsized_octal(const char*txt)
{
      bool sign_flag = false;
      const char*ptr = txt;
      assert(*ptr == '\'');
      ptr += 1;

      if (tolower(*ptr) == 's') {
	    sign_flag = true;
	    ptr += 1;
      }

      assert(tolower(*ptr) == 'o');
      ptr += 1;

      while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
	    ptr += 1;

      unsigned size = 0;
      for (const char*idx = ptr ;  *idx ;  idx += 1)
	    if (*idx != '_') size += 3;

      if (based_size > 0) {
            int rem = based_size % 3;
	    if (rem != 0) based_size += 3 - rem;
	    if (size > based_size) VLwarn(yylloc,
	        "warning: Extra digits given for sized octal constant.");
      }

      verinum::V*bits = new verinum::V[size];

      unsigned idx = size;
      while (*ptr) {
	    unsigned val;
	    switch (ptr[0]) {
		case '0': case '1': case '2': case '3':
		case '4': case '5': case '6': case '7':
		  val = *ptr - '0';
		  bits[--idx] = (val&4) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&2) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&1) ? verinum::V1 : verinum::V0;
		  break;
		case 'x': case 'X':
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  break;
		case 'z': case 'Z': case '?':
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  break;
		case '_':
		  break;
		default:
		  assert(0);
	    }
	    ptr += 1;
      }

      if (gn_strict_expr_width_flag && (based_size == 0))
	    size = truncate_to_integer_width(bits, size);

      verinum*out = new verinum(bits, size, false);
      out->has_sign(sign_flag);
      delete[]bits;
      return out;
}


verinum*make_unsized_hex(const char*txt)
{
      bool sign_flag = false;
      const char*ptr = txt;
      assert(*ptr == '\'');
      ptr += 1;

      if (tolower(*ptr) == 's') {
	    sign_flag = true;
	    ptr += 1;
      }
      assert(tolower(*ptr) == 'h');

      ptr += 1;
      while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
	    ptr += 1;

      unsigned size = 0;
      for (const char*idx = ptr ;  *idx ;  idx += 1)
	    if (*idx != '_') size += 4;

      if (based_size > 0) {
            int rem = based_size % 4;
	    if (rem != 0) based_size += 4 - rem;
	    if (size > based_size) VLwarn(yylloc,
	        "warning: Extra digits given for sized hex constant.");
      }

      verinum::V*bits = new verinum::V[size];

      unsigned idx = size;
      while (*ptr) {
	    unsigned val;
	    switch (ptr[0]) {
		case '0': case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
		  val = *ptr - '0';
		  bits[--idx] = (val&8) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&4) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&2) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&1) ? verinum::V1 : verinum::V0;
		  break;
		case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
		case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':
		  val = tolower(*ptr) - 'a' + 10;
		  bits[--idx] = (val&8) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&4) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&2) ? verinum::V1 : verinum::V0;
		  bits[--idx] = (val&1) ? verinum::V1 : verinum::V0;
		  break;
		case 'x': case 'X':
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  bits[--idx] = verinum::Vx;
		  break;
		case 'z': case 'Z': case '?':
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  bits[--idx] = verinum::Vz;
		  break;
		case '_':
		  break;
		default:
		  assert(0);
	    }
	    ptr += 1;
      }

      if (gn_strict_expr_width_flag && (based_size == 0))
	    size = truncate_to_integer_width(bits, size);

      verinum*out = new verinum(bits, size, false);
      out->has_sign(sign_flag);
      delete[]bits;
      return out;
}


/* Divide the integer given by the string by 2. Return the remainder bit. */
static int dec_buf_div2(char *buf)
{
    int partial;
    int len = strlen(buf);
    char *dst_ptr;
    int pos;

    partial = 0;
    pos = 0;

    /* dst_ptr overwrites buf, but all characters that are overwritten
       were already used by the reader. */
    dst_ptr = buf;

    while(buf[pos] == '0')
	++pos;

    for(; pos<len; ++pos){
	if (buf[pos]=='_')
	    continue;

	assert(isdigit(buf[pos]));

	partial= partial*10 + (buf[pos]-'0');

	if (partial >= 2){
	    *dst_ptr = partial/2 + '0';
	    partial = partial & 1;

	    ++dst_ptr;
	}
	else{
	    *dst_ptr = '0';
	    ++dst_ptr;
	}
    }

    // If result of division was zero string, it should remain that way.
    // Don't eat the last zero...
    if (dst_ptr == buf){
	*dst_ptr = '0';
	++dst_ptr;
    }
    *dst_ptr = 0;

    return partial;
}

/* Support a single x, z or ? as a decimal constant (from 1364-2005). */
verinum* make_undef_highz_dec(const char* ptr)
{
      bool signed_flag = false;

      assert(*ptr == '\'');
      /* The number may have decorations of the form 'sd<code>,
         possibly with space between the d and the <code>.
         Also, the 's' is optional, and marks the number as signed. */
      ptr += 1;

      if (tolower(*ptr) == 's') {
	  signed_flag = true;
	  ptr += 1;
      }

      assert(tolower(*ptr) == 'd');
      ptr += 1;

      while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
	  ptr += 1;

	/* Process the code. */
      verinum::V* bits = new verinum::V[1];
      switch (*ptr) {
	  case 'x':
	  case 'X':
	    bits[0] = verinum::Vx;
	    break;
	  case 'z':
	  case 'Z':
	  case '?':
	    bits[0] = verinum::Vz;
	    break;
	  default:
	    assert(0);
      }
      ptr += 1;
      while (*ptr == '_') ptr += 1;
      assert(*ptr == 0);

      verinum*out = new verinum(bits, 1, false);
      out->has_sign(signed_flag);
      delete[]bits;
      return out;
}

/*
 * Making a decimal number is much easier than the other base numbers
 * because there are no z or x values to worry about. It is much
 * harder than other base numbers because the width needed in bits is
 * hard to calculate.
 */

verinum*make_unsized_dec(const char*ptr)
{
      char buf[4096];
      bool signed_flag = false;
      unsigned idx;

      if (ptr[0] == '\'') {
	      /* The number has decorations of the form 'sd<digits>,
		 possibly with space between the d and the <digits>.
		 Also, the 's' is optional, and marks the number as
		 signed. */
	    ptr += 1;

	    if (tolower(*ptr) == 's') {
		  signed_flag = true;
		  ptr += 1;
	    }

	    assert(tolower(*ptr) == 'd');
	    ptr += 1;

	    while (*ptr && ((*ptr == ' ') || (*ptr == '\t')))
		  ptr += 1;

      } else {
	      /* ... or an undecorated decimal number is passed
		 it. These numbers are treated as signed decimal. */
	    assert(isdigit(*ptr));
	    signed_flag = true;
      }


	/* Copy the digits into a buffer that I can use to do in-place
	   decimal divides. */
      idx = 0;
      while ((idx < sizeof buf) && (*ptr != 0)) {
	    if (*ptr == '_') {
		  ptr += 1;
		  continue;
	    }

	    buf[idx++] = *ptr++;
      }

      if (idx == sizeof buf) {
	    fprintf(stderr, "Ridiculously long"
		    " decimal constant will be truncated!\n");
	    idx -= 1;
      }

      buf[idx] = 0;
      unsigned tmp_size = idx * 4 + 1;
      verinum::V *bits = new verinum::V[tmp_size];

      idx = 0;
      while (idx < tmp_size) {
	    int rem = dec_buf_div2(buf);
	    bits[idx++] = (rem == 1) ? verinum::V1 : verinum::V0;
      }

      assert(strcmp(buf, "0") == 0);

	/* Now calculate the minimum number of bits needed to
	   represent this unsigned number. */
      unsigned size = tmp_size;
      while ((size > 1) && (bits[size-1] == verinum::V0))
	    size -= 1;

	/* Now account for the signedness. Don't leave a 1 in the high
	   bit if this is a signed number. */
      if (signed_flag && (bits[size-1] == verinum::V1)) {
	    size += 1;
	    assert(size <= tmp_size);
      }

        /* Since we never have the real number of bits that a decimal
           number represents we do not check for extra bits. */
//      if (based_size > 0) { }

      if (gn_strict_expr_width_flag && (based_size == 0))
	    size = truncate_to_integer_width(bits, size);

      verinum*res = new verinum(bits, size, false);
      res->has_sign(signed_flag);

      delete[]bits;
      return res;
}

/*
 * Convert a string to a scale value ("1" -> 0, "10" -> 1, "100" -> 2).
 * We have already checked the string is valid.
 */
static int get_timescale_scale(const char *cp)
{
	/* Skip the 1 digit. */
      assert(*cp == '1');
      cp += 1;

	/* Check the number of zeros after the 1. */
      int scale = strspn(cp, "0");
      assert(scale < 3);
      cp += scale;

      assert(*cp == '\0');
      return scale;
}

/*
 * Convert a scale and a units string to a time unit or precision.
 * We have already checked the string is valid.
 */
static int get_timescale_const(int scale, const char *units)
{
      if (strncmp("s", units, 1) == 0) {
	    return scale;

      } else if (strncmp("ms", units, 2) == 0) {
	    return scale - 3;

      } else if (strncmp("us", units, 2) == 0) {
	    return scale - 6;

      } else if (strncmp("ns", units, 2) == 0) {
	    return scale - 9;

      } else if (strncmp("ps", units, 2) == 0) {
	    return scale - 12;

      } else if (strncmp("fs", units, 2) == 0) {
	    return scale - 15;

      }
      assert(0);
      return 0;
}

/*
 * Process either a pull0 or a pull1.
 */
static void process_ucdrive(const char*txt)
{
      UCDriveType ucd = UCD_NONE;

      const char*cp = txt;
      if (strncmp("pull", cp, 4) != 0) {
	    VLerror(yylloc, "error: pull required for `unconnected_drive "
	                    "directive.");
	    return;
      }
      cp += 4;
      if (*cp == '0') ucd = UCD_PULL0;
      else if (*cp == '1') ucd = UCD_PULL1;
      else {
	    VLerror(yylloc, "error: `unconnected_drive does not support "
                            "'pull%c'.", *cp);
	    return;
      }
      cp += 1;
      if (*cp != '\0') {
	    VLerror(yylloc, "error: Invalid `unconnected_drive directive "
	                    "(extra garbage after pull direction).");
	    return;
      }

      uc_drive = ucd;
}

int yywrap()
{
      return 1;
}

/*
 * The line directive matches lines of the form #line "foo" N and
 * calls this function. Here I parse out the file name and line
 * number, and change the yylloc to suite.
 */
static void line_directive()
{
      char *cpr;
	/* Skip any leading space. */
      char *cp = strchr(yytext, '#');
	/* Skip the #line directive. */
      assert(strncmp(cp, "#line", 5) == 0);
      cp += 5;
	/* Skip the space after the #line directive. */
      cp += strspn(cp, " \t");

	/* Find the starting " and skip it. */
      char*fn_start = strchr(cp, '"');
      if (cp != fn_start) {
	    VLerror(yylloc, "error: Invalid #line directive (file name start).");
	    return;
      }
      fn_start += 1;

	/* Find the last ". */
      char*fn_end = strrchr(fn_start, '"');
      if (!fn_end) {
	    VLerror(yylloc, "error: Invalid #line directive (file name end).");
	    return;
      }

	/* Copy the file name and assign it to yylloc. */
      char*buf = new char[fn_end-fn_start+1];
      strncpy(buf, fn_start, fn_end-fn_start);
      buf[fn_end-fn_start] = 0;

	/* Skip the space after the file name. */
      cp = fn_end;
      cp += 1;
      cpr = cp;
      cpr += strspn(cp, " \t");
      if (cp == cpr) {
	    VLerror(yylloc, "error: Invalid #line directive (missing space "
	                    "after file name).");
	    delete[] buf;
	    return;
      }
      cp = cpr;

	/* Get the line number and verify that it is correct. */
      unsigned long lineno = strtoul(cp, &cpr, 10);
      if (cp == cpr) {
	    VLerror(yylloc, "error: Invalid line number for #line directive.");
	    delete[] buf;
	    return;
      }
      cp = cpr;

	/* Verify that only space is left. */
      cpr += strspn(cp, " \t");
      if ((size_t)(cpr-yytext) != strlen(yytext)) {
	    VLerror(yylloc, "error: Invalid #line directive (extra garbage "
	                    "after line number).");
	    delete[] buf;
	    return;
      }

	/* Now we can assign the new values to yyloc. */
      yylloc.text = set_file_name(buf);
      yylloc.first_line = lineno;
}

/*
 * The line directive matches lines of the form `line N "foo" M and
 * calls this function. Here I parse out the file name and line
 * number, and change the yylloc to suite. M is ignored.
 */
static void line_directive2()
{
      char *cpr;
	/* Skip any leading space. */
      char *cp = strchr(yytext, '`');
	/* Skip the `line directive. */
      assert(strncmp(cp, "`line", 5) == 0);
      cp += 5;

	/* strtoul skips leading space. */
      unsigned long lineno = strtoul(cp, &cpr, 10);
      if (cp == cpr) {
	    VLerror(yylloc, "error: Invalid line number for `line directive.");
	    return;
      }
      lineno -= 1;
      cp = cpr;

	/* Skip the space between the line number and the file name. */
      cpr += strspn(cp, " \t");
      if (cp == cpr) {
	    VLerror(yylloc, "error: Invalid `line directive (missing space "
	                    "after line number).");
	    return;
      }
      cp = cpr;

	/* Find the starting " and skip it. */
      char*fn_start = strchr(cp, '"');
      if (cp != fn_start) {
	    VLerror(yylloc, "error: Invalid `line directive (file name start).");
	    return;
      }
      fn_start += 1;

	/* Find the last ". */
      char*fn_end = strrchr(fn_start, '"');
      if (!fn_end) {
	    VLerror(yylloc, "error: Invalid `line directive (file name end).");
	    return;
      }

	/* Skip the space after the file name. */
      cp = fn_end + 1;
      cpr = cp;
      cpr += strspn(cp, " \t");
      if (cp == cpr) {
	    VLerror(yylloc, "error: Invalid `line directive (missing space "
	                    "after file name).");
	    return;
      }
      cp = cpr;

	/* Check that the level is correct, we do not need the level. */
      if (strspn(cp, "012") != 1) {
	    VLerror(yylloc, "error: Invalid level for `line directive.");
	    return;
      }
      cp += 1;

	/* Verify that only space and/or a single line comment is left. */
      cp += strspn(cp, " \t");
      if (strncmp(cp, "//", 2) != 0 &&
          (size_t)(cp-yytext) != strlen(yytext)) {
	    VLerror(yylloc, "error: Invalid `line directive (extra garbage "
	                    "after level).");
	    return;
      }

	/* Copy the file name and assign it and the line number to yylloc. */
      char*buf = new char[fn_end-fn_start+1];
      strncpy(buf, fn_start, fn_end-fn_start);
      buf[fn_end-fn_start] = 0;

      yylloc.text = set_file_name(buf);
      yylloc.first_line = lineno;
}

/*
 * Reset all compiler directives. This will be called when a `resetall
 * directive is encountered or when a new compilation unit is started.
 */
static void reset_all()
{
      pform_set_default_nettype(NetNet::WIRE, yylloc.text, yylloc.first_line);
      in_celldefine = false;
      uc_drive = UCD_NONE;
      pform_set_timescale(def_ts_units, def_ts_prec, 0, 0);
}

extern FILE*vl_input;
void reset_lexor()
{
      yyrestart(vl_input);
      yylloc.first_line = 1;

	/* Announce the first file name. */
      yylloc.text = set_file_name(strdupnew(vl_file.c_str()));

      if (separate_compilation) {
	    reset_all();
	    if (!keyword_mask_stack.empty()) {
		  lexor_keyword_mask = keyword_mask_stack.back();
		  keyword_mask_stack.clear();
	    }
      }
}

/*
 * Modern version of flex (>=2.5.9) can clean up the scanner data.
 */
void destroy_lexor()
{
# ifdef FLEX_SCANNER
#   if YY_FLEX_MAJOR_VERSION >= 2 && YY_FLEX_MINOR_VERSION >= 5
#     if YY_FLEX_MINOR_VERSION > 5 || defined(YY_FLEX_SUBMINOR_VERSION) && YY_FLEX_SUBMINOR_VERSION >= 9
    yylex_destroy();
#     endif
#   endif
# endif
}

